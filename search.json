[{"path":"https://benmarwick.github.io/predictSource/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 John Karon Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://benmarwick.github.io/predictSource/articles/Introduction.html","id":"introduction","dir":"Articles","previous_headings":"","what":"INTRODUCTION","title":"Introduction to the predictSource package","text":"common problem archaeology estimating predicting source material used form artifact. Archaeologists may use 2- 3-dimensional scatterplots artifact chemical composition data predict source artifact. package contains suite R functions apply multivariate statistical methods problem, well functions create analysis data sets, carry basic data quality checks, perform descriptive statistical analyses. Results returned tables plots. user can interact plots identify data observations yielding points suggesting need closer identification; code creates returns data frame containing data interest. package implements three multivariate statistical procedures: principal components analysis (yielding 2-dimensional plots), recursive partitioning (classification trees), random forests. may interest classification trees random forests can use quantitative (e.g. chemical composition) qualitative (e.g. physical characteristic) data analysis. creating analysis files carrying standard data quality descriptive analyses, suggested analysis strategy following. First, principal components analysis quantitative source data evaluate whether first two principal components account sufficient proportion variance among source samples, evaluate separation among sources. Second, appears sources can separated, use source data random forest analysis source data predict source artifact. analysis also orders characteristics (can include qualitative well quantitative characteristics) according importance distinguishing among sources. Third use quantitative characteristics identify artifacts predicted sources plausible two ways: create side--side box plots distributions elements sources artifacts predicted sources (see Figure 4.2 example), plot artifact points 2-dimensional principal components plot, symbols identifying predicted sources, convex hulls source points. step essential identifying missing sources, random forest analysis assign every sample (artifact) source, even characteristics sample resembles source. Fourth, use classification tree analysis identify characteristics best suited separating sources second last section vignette contains discussion using procedure; ordering predictors random forest analysis weights first two principal components may useful specifying classification tree model. note relatively large incorrect artifact source assignment probabilities random forest procedure may identify artifacts need additional evaluation predicted sources (see Section 8). data used illustrate procedures five elements five obsidian sources Jemez caldera central New Mexico (sources coded E) obsidian artifacts valley east caldera (see next section). classification tree separating Jemez obsidian sources Figure 1.1. five candidate elements, strontium, rubidium, yttrium needed perfectly predict source (two elements used niobium zirconium). principal component plot predicting source artifacts using classification tree (rather random forest analysis) Figure 1.2. shows artifacts predicted source C likely fact source B. see corresponding plot random forest predictions identifies likely misclassifications. Figure 1.1: Classification tree analysis Jemez obsidian sources. Figure 1.2 Principal components plot sources Jemez obsidian artifacts predicted classification tree points outside convex hull source samples. final two sections vignette contain discussion results using methods information using functions package, including arguments standard among functions, names components list returned function, instructions selecting points interest plots. also provide information differences interacting plots base R versus Rstudio. particular, necessary user running code base R (Rstudio) edit function produces multiple plots order view plots. using Rstudio, provide simple instructions running example code function.","code":"library(predictSource) data(ObsidianSources) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") tree <-   ps_tree(     data = ObsidianSources,     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = analyticVars,     Model = \"Sr\"+\"Nb\"+\"Rb\"+\"Y\"+\"Zr\",     ModelTitle = \"Sr + Nb + Rb + Y + Zr\",     plotCp = FALSE   ) data(ObsidianSources) data(ObsidianArtifacts) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") sources <- unique(ObsidianSources[, \"Code\"]) save.tree <-   ps_tree(     data = ObsidianSources,     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = analyticVars,     Model = \"Sr\"+\"Nb\"+\"Rb\"+\"Y\"+\"Zr\",     ModelTitle = \"Sr + Nb + Rb + Y + Zr\",     predictSources = FALSE,     predictUnknowns = TRUE,     unknownData = ObsidianArtifacts,     unknownID = \"ID\",     plotTree = FALSE,     plotCp = FALSE   ) pca.eval <-   ps_pcaEvaluation(     SourceData = ObsidianSources,     unknownData = save.tree$predictedSourceUnknowns,     SourceGroup = \"Code\",     unknownGroup = \"predicted\",     known_sources = sources,     predicted_sources = sources,     AnalyticVars = analyticVars,     plotAllPoints = TRUE,     plotHullsOutsidePoints = TRUE,     plotOutsidePoints = TRUE   )"},{"path":"https://benmarwick.github.io/predictSource/articles/Introduction.html","id":"example-data","dir":"Articles","previous_headings":"","what":"EXAMPLE DATA","title":"Introduction to the predictSource package","text":"example data available package data obsidian five sources Jemez caldera northern New Mexico obsidian artifacts sites Pojoaque Valley east caldera. source artifact samples, example analyses use five elements (rubidium, Rb; strontium, Sr; yttrium, Y; niobium, Nb; zirconium, Zr; numerical values parts per million) analyzed Steven Shackley using x-ray fluorescence. elements Shackley uses distinguish among sources predict source artifact. source data publicly available (http://www.swxrflab.net/jemez.htm). site also contains discussions geology source sites. selected data 91 artifacts approximately 450 artifacts collected supervision James Moore, Office Archaeological Studies, New Mexico state government. Shackley predicted sources artifacts using two- three-dimensional scatterplots; except two Jemez caldera (omitted two consideration). artifact data published. artifacts analyzed Shackley’s lab Albuquerque, New Mexico, using different instrumentation used sources. discussion, see http://www.swxrflab.net/labfees.htm#QuanX%20Energy-Dispersive%20X-Ray%20Fluorescence%20Spectrometer%20(EDXRF). general discussion Shackley’s procedures, see http://www.swxrflab.net/swobsrcs.htm. five obsidian sources coded , B, C, D, E source artifact data sets (ObsidianSources ObsidianArtifacts, respectively). source Shackley’s predicted source character-valued variable Code. data set contains variables Code, five elements (numeric variables, variable names element symbols), character-valued variable ID containing artificial lab ID. example, first rows ObsidianSources Table 2.1. Table 2.1: Sample data file ObsidianSources.","code":"library(predictSource) library(magrittr) library(kableExtra) data(ObsidianSources) knitr::kable(ObsidianSources[1:6,],              caption = \"Table 2.1: Sample of the data in the file ObsidianSources.\") %>%   kable_styling(full_width = F,                 position = \"center\") #"},{"path":"https://benmarwick.github.io/predictSource/articles/Introduction.html","id":"analysis-file-creation-and-check","dir":"Articles","previous_headings":"","what":"ANALYSIS FILE CREATION AND CHECK","title":"Introduction to the predictSource package","text":"following procedure produces analysis file excel data files, first row file containing name variable represented data column. files must name element; files use “Zr” others use “Zr “, latter becomes “Zr.” R object created. Also, variable names R case-sensitive, “Zr” “ZR” different variables. addition, value element analysis must numeric; value “< 0” allowed. Missing values left blank. create R object (data frame) excel file stored .csv format, use R command R functions also used, including read.table(); see documentation read.csv (obtained entering ?read.csv R prompt) alternatives details. necessary combine several data files analysis file, use function ps_createData() create R data frame individual R objects. example, Shackley’s website contains excel file data individual sources. creating R data frame source using e.g. read.csv(), element dataOut list created ps_createData() data frame analysis variables specified sequence; create new data frame, use command object_name data frame created read.csv(); alternatively, save result ps_createData() R object (list), create new data frame command data frames can combined analysis data frame using R function rbind(). may necessary repeat operation number source files, may useful define R function function return result rbind() operation define data frame, creating analysis file, use obtain basic descriptive statistics carry several data checks (number observations, number missing values, number negative values, duplicate observations, descriptive statistics, group analysis variable). data set ObsidianSources, negative values five elements interest duplicate observations. numbers observations source element Table 3.1. Note R object returned function contains rows NA (R code missing value) rows descriptive statistics group; rows replace rows blanks excel file. Table 3.1: Number values element Jemez source. descriptive statistics elements classification tree Figure 1.1 Table 3.2. Table 3.2: Descriptive statistics elements Jemez obsidian sources used classification tree Figure 1.1. example table shows , descriptive statistics data frame (Robject$statistics), row element source, row containing missing values (NAs) elements. data frame written excel file, rows elements can converted blank rows, make resulting table easier read. Note second split Figure 1.1 Rb, even though one unit difference source B (maximum 178) source C (minimum 179). lead misclassification artifacts. understanding later results, need corresponding descriptive statistics artifacts. Table 3.3: Descriptive statistics elements obsidian artifacts used classification tree Figure 1.1. Note , comparing two tables, comparing distributions strontium sources artifacts, see immediately none samples source source E.","code":"object_name <- read.csv(file = 'file name') new_object_name <- ps_createData(data=object_name)$dataOut new_object_name <-list_name$dataOut ps_combine <- function() rbind(data1, data2, ...) analysisFile <- ps_combine() ps_checkData(data=analysisFile, CheckDupVars, GroupVar, Groups, AnalyticVars) library(predictSource) data(ObsidianSources) checkData <-   ps_checkData(     data = ObsidianSources,     CheckDupVars = c(\"Code\", \"ID\"),     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = c(\"Sr\", \"Rb\", \"Y\")   ) knitr::kable(checkData$statistics, caption = \"Table 3.2: Descriptive statistics for the elements in the Jemez obsidian sources used in the classification tree in Figure 1.1.\") %>%   kable_styling(full_width = F, position = \"center\") library(predictSource) data(ObsidianArtifacts) checkData <-   ps_checkData(     data = ObsidianArtifacts,     CheckDupVars = c(\"Code\", \"ID\"),     GroupVar = \"Code\",     ByGroup = FALSE,     AnalyticVars = c(\"Sr\", \"Rb\", \"Y\")   ) knitr::kable(checkData$statistics, caption = \"Table 3.3: Descriptive statistics for the elements in the obsidian artifacts used in the classification tree in Figure 1.1.\") %>%   kable_styling(full_width = F, position = \"center\")"},{"path":"https://benmarwick.github.io/predictSource/articles/Introduction.html","id":"exploratory-analyses","dir":"Articles","previous_headings":"","what":"EXPLORATORY ANALYSES","title":"Introduction to the predictSource package","text":"package contains functions create basic descriptive statistics tables plots: box plots, pairs plots (matrix two-dimensional scatterplots), coefficients variation correlations pairs elements.","code":""},{"path":"https://benmarwick.github.io/predictSource/articles/Introduction.html","id":"box-plots","dir":"Articles","previous_headings":"EXPLORATORY ANALYSES","what":"Box plots","title":"Introduction to the predictSource package","text":"Box plots, created function ps_boxPlots(), useful comparing distributions element among sources identifying outlying values. Figure 4.1 shows box plots four elements source data. understand information plot, look plot zirconium source C. heavy line, narrow part notch, median zirconium values C. top bottom box represent 25th 75th percentiles data, respectively (quantiles). notches define 95% confidence interval median; overlap two sources, plausible sources significantly different medians. (plots yield warning messages notches extend beyond quartiles; messages can ignored.) Vertical dashed lines quartiles larger smaller value horizontal line define ranges “adjacent values”. largest adjacent value largest value less equal upper quartile plus 1.5 times interquartile range (upper quartile minus lower quartile). smallest adjacent value smallest value greater equal lower quartile minus 1.5 times interquartile range. standard normal distribution (mean 0, standard deviation 1), median 0, upper lower quartiles 0.68 -0.68, respectively; upper lower adjacent values 2.72 (4 x 0.68) -2.72, respectively. probability value standard Gaussian distribution greater 2.72 0.003. follows , Gaussian data, probability value lies outside range adjacent values less 0.01. Therefore, values outside range adjacent values either may considered outliers, data unlikely Gaussian. box adjacent values approximately symmetric around median, distribution data approximately symmetric. Relative variation values element among sources can evaluated comparing heights boxes among sources. boxes Figure 4.1, , see immediately little variation among values element source. outliers, far range adjacent values. Figure 4.1: Box plots Jemez obsidian source data. can also create side--side box plots sources artifacts assigned sources, order see well distributions elements artifacts correspond distributions corresponding sources. plot shows comparison rubidium niobium; code artifact .added code assigned source (e.g., artifacts assigned source x code x.). see , artifacts assigned sources E, artifact values rubidium larger corresponding source values also variable. one artifact assigned source D, niobium value clear outlier, suggesting misclassified artifact. Figure 4.2: Box plots rubidium niobium comparing Jemez obsidian sources obsidian artifacts assigned sources Steve Shackley. x.labels artifacts assigned source x. Note one artifact assigned source D values suggesting actually source C, one assigned source B values suggest another source (rubidium value suggests source D). plots may useful evaluating accuracy source predictions.","code":"library(predictSource) data(ObsidianSources) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Nb\") boxPlots <-   ps_boxPlots(     data = ObsidianSources,     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = analyticVars,     Nrow = 2,     Ncol = 2   ) library(predictSource) data(ObsidianSources) data(ObsidianArtifacts) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") ObsidianSources <- ObsidianSources[, c(\"Code\", analyticVars)] Artifacts <- ObsidianArtifacts[, c(\"Code\", analyticVars)] sourcesCode <- as.vector(ObsidianSources[, \"Code\"], mode = \"character\") artifactsCode <-   as.vector(paste(Artifacts[, \"Code\"], \"a\", sep = \".\"), mode = \"character\") codes <- c(sourcesCode, artifactsCode) sourcesArtifacts <-   data.frame(rbind(ObsidianSources, Artifacts)[, analyticVars], Code = codes) boxPlots <-   ps_boxPlots(     data = sourcesArtifacts,     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = c(\"Rb\", \"Nb\"),     Nrow = 2,     Ncol = 1   )"},{"path":"https://benmarwick.github.io/predictSource/articles/Introduction.html","id":"pairs-plots","dir":"Articles","previous_headings":"EXPLORATORY ANALYSES","what":"Pairs plots","title":"Introduction to the predictSource package","text":"pairs plot, useful visualizing relations pair variables, matrix containing bivariate scatter plots pairs quantitative variables. matrix symmetric, corresponding plots across main diagonal interchange horizontal vertical axes. plot contains robust locally weighted line describe trend data. line obtained R function lowess() computes predicted value abscissa (x-value) regression based fraction data, weights decreasing abscissas farther point, rejecting outliers (see e.g. Chambers et al., 1983, Chapter 4). function tends try line go near points largest smallest abscissas; therefore behavior ends plot reliable. line obtained function panel.smooth() within call pairs() argument span. line (smoother) useful values; example plot demonstrates trends may show useful results even 15 values. plot obtained function ps_pairsPlot() arguments data, GroupVar, Groups, AnalyticVars, Span. except Span meanings function ps_boxPlots(). Span value 0 1 (equal 0) defining proportion data used estimate robust smooth; function written default value 2/3, can changed. small value (0.1) produce plots show clear trend; large value (close 1) produce plots show changes trends. Running function produce warnings span graphical parameter; warnings ignored. plot relations elements source shows relationships rubidium yttrium, rubidium zirconium, approximately linear, , roughly, relation values strontium yttrium zirconium. Note necessary look scatterplots relation pair variables, limited variation one variable dependence location largest smallest values one variable can make seem relationship (see plots strontium ordinate versus yttrium zirconium). FIgure 4.3: Pairs plots Jemez obsidian source data.","code":"library(predictSource) data(ObsidianSources) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") pairsPlot <-   ps_pairsPlot(     data = ObsidianSources,     GroupVar = \"Code\",     Groups = \"A\",     AnalyticVars = analyticVars   )"},{"path":"https://benmarwick.github.io/predictSource/articles/Introduction.html","id":"coefficients-of-variation-of-elements-and-correlations-between-pairs-of-elements","dir":"Articles","previous_headings":"EXPLORATORY ANALYSES","what":"Coefficients of variation of elements and correlations between pairs of elements","title":"Introduction to the predictSource package","text":"Numerical estimates associations pairs analytic variables source, form Spearman correlation coefficients, produced function ps_CV_corr(). function also produces estimate coefficient variation (standard deviation divided mean) variable source. Spearman correlation coefficient computed ranks data, affected numerical value outlier. coefficient variation use numerical values, hence affected outlier. function returns list elements names CV (coefficients variation) corr (correlations). default, coefficients variation correlations rounded two decimal places. Table 4.1 contains Spearman correlation coefficient estimates pairs variables source. estimate describes close relation pair variables strictly monotone. relationship roughly monotone, correlation coefficient describe rapidly one variable changes respect (correlation coefficient linear relationship can large even slope line describing relationship small). example, estimated correlation strontium zirconium source 0.51, even though pairs plot elements strontium ordinate shows strontium increases slowly zirconium increases. correlation table useful summarizing relationships pairs elements sources: clear relationships vary substantially among sources. Table 4.2 contains Spearman correlation coefficients group membership ignored. high correlation pairs variables suggests principal components useful method showing variation among source groups two dimensions. Table 4.1: Spearman correlations among pairs elements Jemez sources, group. Table 4.2: Spearman correlations among pairs elements Jemez obsidian sources, groups combined. Figure 4.4 contains graphical display correlations. slope semi-major axis ellipse indicates whether corresponding correlation positive negative; width ellipse (length semi-minor axis) indicates magnitude correlation (shorter axis [narrower ellipse] indicates stronger correlation) color ellipse. Figure 4.4: Graphical display correlations Jemez obsidian source analysis variables groups combined. Table 4.3 shows coefficients variation element source. standard deviation small compared corresponding mean (coefficient variation 0.11, 0.05 less) except strontium sources C D. relatively large values coefficient variation strontium sources result small mean strontium values sources: table descriptive statistics (Table 3.2) gives mean values strontium 5 10, C D, respectively, ranges 0 8 2 11, respectively. Table 4.3: Coefficients variation elements Jemez sources.","code":"library(predictSource) data(ObsidianSources) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") CV_corr <-   ps_CV_corr(     data = ObsidianSources,     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = analyticVars,     plotCorrs = FALSE   ) knitr::kable(CV_corr$corr, caption = \"Table 4.1: Spearman correlations among pairs of elements from the Jemez sources, by group.\") %>%   kable_styling(full_width = F, position = \"center\") # data(ObsidianSources) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") CV_corr <-   ps_CV_corr(     data = ObsidianSources,     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = analyticVars,     ByGroup = FALSE,     plotCorrs = FALSE   ) knitr::kable(CV_corr$corr, caption = \"Table 4.2: Spearman correlations among pairs of elements from the Jemez obsidian sources, all groups combined.\") %>%   kable_styling(full_width = F, position = \"center\") # data(ObsidianSources) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") CV_corr <-   ps_CV_corr(     data = ObsidianSources,     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = analyticVars,     ByGroup = FALSE,     plotCorrs = TRUE   ) data(ObsidianSources) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") CV_corr <-   ps_CV_corr(     data = ObsidianSources,     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = analyticVars,     ByGroup = TRUE,     plotCorrs = FALSE   ) knitr::kable(CV_corr$CV, caption = \"Table 4.3:  Coefficients of variation of the elements from the Jemez sources.\") %>%   kable_styling(full_width = F, position = \"center\") #"},{"path":"https://benmarwick.github.io/predictSource/articles/Introduction.html","id":"two-and-three-dimensional-scatterplots","dir":"Articles","previous_headings":"EXPLORATORY ANALYSES","what":"Two-and three-dimensional scatterplots","title":"Introduction to the predictSource package","text":"Two- three-dimensional scatterplots useful visualizing relationships among elements. user can obtain plots functions ps_2dPlot() ps_3dPlot(), respectively. Several sources can shown single plot, different colors identifying sources. large number sources, user can plot medians instead points. two dimensional plots, user can show additional information: Gaussian confidence ellipses values source; convex hull points source; either two nonparametric curves describing relation elements source, lowess smooth kernel smoother. user can also identify points interest (e.g. outliers) two-dimensional plot create data frame containing data yielding points. function ps_2dPlotGauss() computes test statistics checking pair elements source bivariate Gaussian distribution. function ps_3dPlotRotate() allows user rotate three-dimensional plot. Examples two-dimensional scatterplots . first two show plots two pairs elements (rubidium/zirconium rubidium/niobium) sources B , 95% 99% Gaussian confidence ellipses; first second include lowess kernel smooths points, respectively. two types smoothers show similar trends; kernel smooths made less wiggly increasing default value (0.3) span parameter KernelWidth. next two plots show examples sources one plot zirconium versus rubidium. first shows convex hull points source, source symbol plotted median points. see, example, medians sources B D close smallest values rubidium, indicating , source, one rubidium values large compared values. second plot shows points confidence ellipses source, colors plotting characters identifying sources. Requesting plot Identify = TRUE allows user create data set (plot_2d$data.check) containing data generating points may interest. Table 4.4 shows data generating five points. example, point source E strontium value 72, smaller value sample source E. confidence ellipses provide information whether distributions pair elements differ among sources. bivariate distribution Gaussian 99% confidence ellipses overlap among sources, plausible distributions pair elements among sources overlap. function ps_2dPlotGauss(), discussed , provides plots tests evaluate hypothesis bivariate distribution Gaussian. anticipate, find rubidium/zirconium distribution likely Gaussian source source B. Note source values roughly fill 95% confidence ellipse source , values tend cluster source B, two lie approximately boundary 99% confidence ellipse. Figure 4.5: Example scatterplots obsidian Jemez source data confidence ellipses robust lowess smoothing lines. Figure 4.5: Example scatterplots obsidian Jemez source data confidence ellipses robust lowess smoothing lines. Figure 4.6: Example scatterplot obsidian Jemez source data confidence ellipses kernel smoothing lines. Figure 4.6: Example scatterplot obsidian Jemez source data confidence ellipses kernel smoothing lines. Figure 4.7: Example scatterplot obsidian Jemez source data median values convex hulls points source. Figure 4.8: Example scatterplot obsidian Jemez source data data sources, confidence ellipses robust lowess smoothing lines. Table 4.4: Data generating identified points. function ps_3dPlot() creates one three-dimensional scatterplots. two groups (sources) shown plot, different colors identify groups, example . colors specified parameter Colors; several groups shown plot, must least many colors groups; default value parameter Colors five colors (red, black, blue, green, purple); colors used order. user can rotate plot using function ps_3dPlotRotate(). file:///C:/Consulting/Sourcing/Vignette/scatterRbSrY.doc Figure 4.9: Example three-dimensional plot showing data three Jemez obsidian sources. Figure 4.9: Example three-dimensional plot showing data three Jemez obsidian sources.","code":"data(ObsidianSources) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") plot_2d <-   ps_2dPlot(     data = ObsidianSources,     GroupVar = \"Code\",     ID = \"ID\",     Groups = c(\"A\", \"B\", \"C\", \"D\"),     AnalyticVars = analyticVars,     VariablePairs = analyticVars[c(1, 4)],     PlotEllipses = TRUE,     LowessLine = TRUE,     ByGroup = TRUE   ) data(ObsidianSources) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") plot_2d <-   ps_2dPlot(     data = ObsidianSources,     GroupVar = \"Code\",     ID = \"ID\",     Groups = c(\"A\", \"B\", \"C\", \"D\"),     AnalyticVars = analyticVars,     VariablePairs = analyticVars[c(1, 4)],     PlotEllipses = TRUE,     KernelSmooth = TRUE,     LowessLine = FALSE,     ByGroup = TRUE   ) data(ObsidianSources) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") plot_2d <-   ps_2dPlot(     data = ObsidianSources,     GroupVar = \"Code\",     ID = \"ID\",     Groups = \"All\",     AnalyticVars = analyticVars,     VariablePairs = analyticVars[1:2],     ByGroup = FALSE,     PlotPoints = FALSE,     PlotMedians = TRUE,     PlotHulls = TRUE,     LowessLine = FALSE   ) data(ObsidianSources) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") plot_2d <-   ps_2dPlot(     data = ObsidianSources,     GroupVar = \"Code\",     ID = \"ID\",     Groups = \"All\",     AnalyticVars = analyticVars,     VariablePairs = analyticVars[c(1, 4)],     ByGroup = FALSE,     PlotEllipses = TRUE,     LowessLine = TRUE,     PlotAllGroups = TRUE   ) data(\"sources.data.check\") knitr::kable(sources.data.check, caption = \"Table 4.4: Data generating identified points.\") %>%   kable_styling(full_width = F, position = \"center\") # library(predictSource) data(ObsidianSources) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") plot3d <-   ps_3dPlot(     data = ObsidianSources,     GroupVar = \"Code\",     Groups = c(\"A\", \"B\", \"C\"),     AnalyticVars = analyticVars,     Selections = rbind(analyticVars[1:3], analyticVars[2:4])   )"},{"path":"https://benmarwick.github.io/predictSource/articles/Introduction.html","id":"evaluating-bivariate-normality","dir":"Articles","previous_headings":"EXPLORATORY ANALYSES","what":"Evaluating bivariate normality","title":"Introduction to the predictSource package","text":"function ps_2dPlotGauss() allows user evaluate hypothesis pair variables bivariate Gaussian distribution group (source). function also used function ps_pcaGaussian() evaluate whether first two principal components group bivariate distribution; therefore, discussion section also appropriate similar analysis principal components results. either case, evaluating bivariate normality useful deciding whether confidence ellipse valid describing variation data group. function uses scatter plots hypothesis tests. essential note , hypothesis tests fail reject null hypothesis Gaussian distribution, concude distribution Gaussian. may plausible believe bivariate distribution approximately Gaussian, therefore confidence ellipses may useful identifying observations interest. pair variables bivariate Gaussian distribution, variable must univariate Gaussian distribution, bivariate distribution must also Gaussian. Note , bivariate distribution Gaussian, one conditions can true (condition necessary sufficient). function ps_2dPlotGauss() displays Q-Q plots giving user information whether univariate distributions may Gaussian. function also computes p-values test statistics univariate Gaussian distributions bivariate Gaussian distribution. p-values component named pvalues list returned function. function also allows users identify points interest univariate Q-Q plots (parameter Identify=TRUE); component dataCheck list returned function contains data generating points interest. Q-Q plot quantile-quantile plot sample quantiles univariate data versus theoretical quantiles univariate Gaussian distribution. Therefore, univariate distribution Gaussian, points plot roughly linear. Points largest values trend line indicate distribution short right tail; points smallest values trend line indicate distribution short left tail. opposite behaviors extreme indicate long tails. See e.g. Chambers et al., Chapter 6, discussion Q-Q plots. addition standard Q-Q plot, ps_2dPlotGauss() function implements informative plot. obtain plot, large number (default, 1000) Gaussian distributions simulated observed mean variance data set. upper lower 95% 99% confidence bands points simulated Q-Q plots computed plotted, along observed points (blue). Observed points fall within 95% bands (perhaps 99% bands) regarded unusual. Thus, simulated plot figure provides information whether point appears depart trend line unusual. simulated Q-Q plot computed user-contributed function qqtest(); see Oldfield discussion details. function ps_2dPlotGauss() function produces simulation standard Q-Q plots side--side data set. qqPlot TRUE, function also produces multivariate Q-Q plot. plot based fact , data Gaussian, generalized distances points mean (squared Mahalanobis distances) chi-squared distribution two degrees freedom (Johnson Wichern, section 4.6). many statistical tests univariate bivariate Gaussian distributions. univariate tests variable power different violations Gaussian assumption. function ps_2dPlotGauss() implements two univariate tests, Anderson-Darling Shapiro-Wilk tests. Properties definitions many tests D’Agostino Stephens, Chapter 9, Tests Normal Distribution. chapter, D’Agostino states “Anderson-Darling A2 test…EDF test recommend us[e]” (page 372) “powerful EDF test appears Anderson-Darling A2 …. times presented similar power Shapiro-Wilk W test.” (page 404). p-values two tests table produced function, columns names AD.variable_name SW.variable_name, respectively. table also contains p-values three tests bivariate Gaussian distribution: Mardia’s test based skewness kurtosis (D’Agostino Stephens, page 409), tests developed Henze Zirkler Royston. tests use mvn() function user-contributed package MVN. Royston test may appropriate relatively small sample sizes: Farrell, Salibian-Barrera, Naczk comment “consistent invariant test proposed Henze Zirkler…found good power properties, particularly sample sizes 75 , approach suggested Royston… performs effectively detecting departures MVN smaller sample sizes.” sample sizes p-values tests component named pvalues list returned function; examples Tables 7a 7b, . Q-Q plots evaluating assumptions univariate bivariate Gaussian distributions bivariate rubidium/zirconium rubidium/niobium pairs , well two examples multivariate Q-Q plot. instructive compare univariate Q-Q plots without simulation, order evaluate data points clearly consistent univariate Gaussian distribution, compare p-values Tables 4.5 4.6. also note value far univariate Q-Q line yields value far line bivariate Q-Q plot. Rubidium/zirconium: source , Q-Q plot suggests distribution rubidium long left tail. However, plot using simulation shows sample points well within 95% confidence region. One zirconium value large within 95% confidence region simulated plot. p-values univariate tests elements relatively large. Thus, results simulation Q-Q plots formal test statistics support approximate univariate Gaussian distributions elements. multivariate Q-Q plot short right tail based one value. p-values four tests bivariate normality also large (least 0.24). Therefore, plausible elements approximate bivariate Gaussian distribution source . conclusion consistent scatterplot confidence ellipses Figure 4.8. contrast, source B, Q-Q plots show elements short right tails. univariate test statistics p-values less 0.01. multivariate Q-Q plot two extreme values. four multivariate tests yield small p-values (0.005). conclude elements bivariate Gaussian distribution source B. conclusion also consistent scatterplot Figure 4.8. Rubidium/niobium: previous discussion, know rubidium approximate Gaussian distribution source source B. source , univariate test statistics marginally “significant” p-values. multivariate Q-Q plot short right tail based one value. Royston test yields p-value 0.065. Based results, may willing assume approximate bivariate Gaussian distribution two elements source . However, scatterplot confidence ellipses Figure 4.7 concern, lowess smooth linear, one point boundary 99% ellipse. appears useful look scatterplots smooths evaluating whether distributions Gaussian. Since niobium many samples equal values, clear niobium Gaussian distribution (confirmed p-values univariate tests). Henze-Zirkler Royston tests properly reject bivariate normality, even though Mardia tests . phenomenon occurs sources C, D, E. reinforces preference tests. Figure 4.10a: Q-Q plots rubidium zirconium, including bivariate Q-Q plot, Jemez obsidian source data source . Figure 4.10b: Q-Q plots rubidium zirconium, including bivariate Q-Q plot, Jemez obsidian source data source B. Figure 4.10c: Q-Q plots rubidium niobium Jemez obsidian source data sources B. Table 4.5: P-values test statistics bivariate Rb/Zr distribution Jemez obsidian sources. Table 4.6: Samples sizes p-values test statistics bivariate Rb/Nb distribution Jemez obsidian sources.","code":"library(predictSource) data(ObsidianSources) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") plot2dGauss <-   ps_2dPlotGauss(     data = ObsidianSources,     GroupVar = \"Code\",     ID = \"ID\",     Groups = \"A\",     AnalyticVars = analyticVars,     variablePair = c(\"Rb\", \"Zr\"),     QQPlot = TRUE   ) library(predictSource) data(ObsidianSources) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") plot2dGauss <-   ps_2dPlotGauss(     data = ObsidianSources,     GroupVar = \"Code\",     ID = \"ID\",     Groups = \"B\",     AnalyticVars = analyticVars,     variablePair = c(\"Rb\", \"Zr\")   ) library(predictSource) data(ObsidianSources) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") plot2dGauss <-   ps_2dPlotGauss(     data = ObsidianSources,     GroupVar = \"Code\",     ID = \"ID\",     Groups = c(\"A\", \"B\"),     AnalyticVars = analyticVars,     variablePair = c(\"Rb\", \"Nb\"),     QQPlot = FALSE   )"},{"path":"https://benmarwick.github.io/predictSource/articles/Introduction.html","id":"principal-components-analysis","dir":"Articles","previous_headings":"","what":"5. PRINCIPAL COMPONENTS ANALYSIS","title":"Introduction to the predictSource package","text":"Principal components analysis standard method implementing dimension reduction order create one two-dimensional plots evaluate separation groups based quantitative variables. function ps_pca() package principal components analysis standardizing data (variable mean zero variance 1), plots first two principal components (options ps_2dPlot()), returns list computed values interest (defined ). user can also produce scree plot, showing variances principal component, , analysis group, box plots values component group first two components. option principal components plot show confidence ellipses around points group (source). ps_2dPlot.Gauss(), parameter Identify=TRUE function allows user identify points interest points plotted analytic values defining group medians medians plotted. points identified, data frame containing information points (dataCheck) sorted group name, , samples IDs, ID within group. result R sort convention, ID A1x (x integer 0 9) appears ID A2. function ps_pcaGaussian() provides information evaluate whether points group bivariate Gaussian distribution, information provided function ps_2dPlotGauss(). user can create data frame containing data generating points interest setting parameter gaussIdentify = T. principal components analysis requires data analyzed missing values (observation missing value deleted analysis). function ps_pca() uses function rfImpute() impute single value missing value, observations missing data observations can analyzed. See discussion Section 9 (Discussion) information procedure. imputation ps_pcaGaussian(): function analyzes observations complete data.","code":""},{"path":"https://benmarwick.github.io/predictSource/articles/Introduction.html","id":"standard-principal-components-analysis","dir":"Articles","previous_headings":"5. PRINCIPAL COMPONENTS ANALYSIS","what":"5.1 Standard principal components analysis","title":"Introduction to the predictSource package","text":"function ps_pca() returns list numerical information analysis. component named variances data frame standard deviation, proportion total variance, cumulative proportion variance component (see Table 5.1). component named weights contains, component, weight predictor variable (obsidian data, element) used compute value component variable; weights standardized sum squares weights component 1 (see Table 5.2 results analysis). components named Predicted DataPlusPredicted contain predicted principal component values original data plus predicted values, respectively, data used analysis (see Table 5.3 partial table obsidian source data). addition, user identifies points interest, data generating points component dataCheck. obsidian data, scree plot (Figure 5.1) shows , five principal components, first two components explain nearly variance source data. Table 5.1 shows components explain 96% total variance. common rule thumb components used explain least 90% total variance. Therefore, able draw valid conclusions using first two components. box plots (Figure 4.1) show first component separates five Jemez sources, except possibly sources D (box plots overlap slightly). box plots D widely separated second component: able separate sources principal components analysis. table weights (Table 5.2) shows first principal component essentially strontium minus average four elements (weights component can multiplied -1 without affecting results). second component harder describe, strontium zirconium greatest weights. first two components explain variance element small weights components, element ignored classification tree random forest analyses. Figure 5.2 contains plot first two principal components group 95% 99% confidence ellipses. groups well separated, fact confidence ellipses overlap necessary conclude can separate sources based principal components analysis (need concerned validity assumption bivariate distribution Gaussian source wanted use confidence ellipses). Note sources D overlap respect first component, predicted box plot, E nearly overlap, shown plot. Figure 5.1: scree plot principal components analysis Jemez obsidian source data.  Table 5.1: Proportions variance explained principal components analysis Jemez obsidian source data. Table 5.2: Weights principal component principal components analysis Jemez obsidian source data. Table 5.3: Original data principal components principal components analysis Jemez obsidian source data.","code":"data(ObsidianSources) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") save_pca <-   ps_pca(     data = ObsidianSources,     ID = \"ID\",     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = analyticVars,     pcPlot = FALSE,     ScreePlot = TRUE   ) data(ObsidianSources) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") save_pca <-   ps_pca(     data = ObsidianSources,     ID = \"ID\",     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = analyticVars,     pcPlot = FALSE,     BoxPlots = TRUE   ) data(ObsidianSources) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") save_pca <-   ps_pca(     data = ObsidianSources,     ID = \"ID\",     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = analyticVars   ) save_pca <-   ps_pca(     data = ObsidianSources,     ID = \"ID\",     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = analyticVars,     pcPlot = FALSE   ) knitr::kable(save_pca$variances, caption = \"Table 5.1:  Proportions of the variance explained in the principal components analysis of the Jemez obsidian source data.\") %>%   kable_styling(full_width = F, position = \"center\") knitr::kable(save_pca$weights, caption = \"Table 5.2:  Weights for each principal component in the principal components analysis of the Jemez obsidian source data.\") %>%   kable_styling(full_width = F, position = \"center\") knitr::kable(head(save_pca$DataPlusPredicted), caption = \"Table 5.3:  Original data and principal components in the principal components analysis of the Jemez obsidian source data.\") %>%   kable_styling(full_width = F, position = \"center\") %>%   kable_styling(full_width = F, position = \"center\")"},{"path":"https://benmarwick.github.io/predictSource/articles/Introduction.html","id":"evaluating-the-first-two-components-for-a-bivariate-gaussian-distribution","dir":"Articles","previous_headings":"5. PRINCIPAL COMPONENTS ANALYSIS","what":"5.2 Evaluating the first two components for a bivariate Gaussian distribution","title":"Introduction to the predictSource package","text":"source, principal component linear combination elements source (Jemez obsidian source data, coefficients Table 5.2). variable Gaussian distribution set variables, linear combination variables univariate Gaussian distribution. Therefore, element source approximate Gaussian distribution, first two principal components source may approximate Gaussian distribution. However, least one element Gaussian distribution, principal components unlikely Gaussian distribution. function ps_pcaGaussian() computes p-values, source, assessing whether (using default parameter values) first two principal components bivariate Gaussian distribution. function uses function ps_2dPlotGauss(), discussion function applies . Table 5.4 contains p-values functions. likely approximate bivariate Gaussian distributions sources C, sources B, D, E. Table 5.4: P-values test statistics bivariate Gaussian distribution first two principal components Jemez obsidian source.","code":""},{"path":"https://benmarwick.github.io/predictSource/articles/Introduction.html","id":"classification-trees-recursive-partitioning","dir":"Articles","previous_headings":"","what":"6 CLASSIFICATION TREES (recursive partitioning)","title":"Introduction to the predictSource package","text":"classification tree obtained recursive partitioning target (dependent) variable categorical (regression tree continuous dependent variable). tree model succession binary splits, result similar botanical key (two subgroups decision point). method uses criterion variation within group develop tree structure terminal groups (nodes) uniform possible, subject criteria group defined split must contain minimal number data records order split (default 20, user can change using argument minSplit), splits give improvement variation among terminal groups less specified minimum (user can control using function argument cP). Note requirement minimum group size indicates classification trees used data sets small (imprecise criterion!). classification tree procedure number desirable properties: nonparametric (data need transformed offered model, outliers affect results); predictor variables can continuous, categorical, ; procedure used yields prediction error using cross-validation (defined ); procedure allows missing values (see ); number outcome groups number predictor variables small enough, tree can displayed graph, showing criterion splitting node. details recursive partitioning James et al.; Molnar; Strobl, Malley, Tutz; Therneau Atkinson (latter reference examples explanation output R rpart() function, use function ps_tree() create classification trees). important note , every node decision binary, tree yield predicted terminal group every observation, even observation resemble members group. rpart() function uses “surrogate variables” algorithm creating classification tree observation contains missing value; explanation variables chosen, see Therneau Atkinson. function ps_tree() defines splits using dichotomous criterion single variable (tree diagram, arm going left, value variable less specified amount). procedure starts finding variable model statement two subgroups defined using variable yields two subgroups outcome variable (case obsidian data, subgroups sources) “pure” possible. default criterion, used ps_tree(), Gini criterion. splitting procedure used daughter node. number implementations recursive partitioning. used rpart() function rpart library R. function provides estimate potential error (misclassification) tree using cross-validation: subset data deleted, tree created using remaining data; tree applied subset, obtain error rate; process repeated, default 10 times. rpart() function also statistical procedure choosing proper number splits (recursive partitioning trees tend complex, overfitting data). software grows tree many nodes (overfits data), prunes back tree split results specified minimum improvement (default, 0.01) measure diversity within node. tree procedure implemented using model statement assigned parameter Model containing predictor variables separated “+” signs. examples , value Model “Sr”+“Nb”+“Rb”+“Y”+“Zr”. order variables appear model statement may affect tree produced algorithm (several predictor variables yield equally good splits node, procedure may use variable appears first model statement). Therefore, model statements variables different orders can yield different categorical trees. result, suggest running random forest analysis classification tree model, listing predictor variables tree model statement order importance estimated random forest model. value Model uses predicted order. function produces two plots, classification tree reduction cross-validation error estimate increasing number splits. returns list three results computations: definition tree (including split criteria; useful tree large plotted), classification results, Cp table (defined ). addition, function can predict group (source) membership new observations (artifacts). , set parameter predictSources equal TRUE parameter predictData equal name data set analytic data new observations. case, list returned function also components predictedSources, data frame predicted group (source) analytic data new observation (also sample ID, one), predictedTotals, vector number observations assigned group (source). Missing values observation also handled using surrogates. Figure 6.1 shows classification tree using obsidian source data (tree Figure 1.1). see random forest analysis predicts importance elements predicting source , greatest least, strontium, niobium, rubidium, yttrium, zirconium. four splits, rubidium used twice, two potential predictor variables used, terminal node pure (contains observations single source). Note rubidium used instead niobium tree, even though random forest analysis predicts niobium important. Zirconium, predicted least important predictor, used. Rubidium niobium strong correlation (0.92) source ignored, high correlations sources , C, D (least 0.59: Table 4.1); rubidium used identify sources C. Figure 6.1: classification tree Jemez obsidian source data based five potential elements predictors. understand structure tree decision splits, compare tree descriptive statistics sources Table 3.2 box plots sources Figure 4.1. table figure show strontium values source E much larger values four sources. minimum value E 72; maximum sources 54; value defining tree branches first node 54, average two values. next node, minimum value source C 179; maximum value sources 178; cutpoint average values. small difference implies expect misclassification artifacts using tree. Figure 4.1, much better use niobium yttrium assign sample source C. Rerunning analysis niobium first element model statement yields tree. clear algorithm makes choice, clear algorithm use differences extreme values candidate groups creating tree. Figure 6.2 shows reduction crossvalidation error estimate increasing number nodes. large number splits, plot may show horizontal asymptote increasing number splits; can useful deciding reduce number splits. default, decrease 0.01 Cp required node split; user can change using argument cP. clear error reduction three splits shown plot. Figure 6.2: Plot reduction crossvalidation error increasing number nodes classification tree Jemez obsidian source data based five potential elements predictors. tree complex display, description tree contained component Tree list produced ps_tree(). obsidian sources, object (R list) displayed . text information [node), split, n, loss, yval, (yprob)] describes displayed: node number, split criterion, number observations node, measure loss, predicted group membership node, proportions groups node. predicted group membership group highest proportion. helpful compare display plot showing tree. Observe , node root, first indented line describes path left split, value “node)” twice value “node)” node split. value “node)” path right one greater value path left. object displayed (much greater detail, encourage reader use command summary(tree$Tree) running example code): component classification list produced ps_tree() contains table predicted sources data used create tree. results Jemez obsidian source data Table 6.2. rows known group codes; columns predicted groups. Since prediction errors (see Figure 6.1), matrix diagonal. Note , Figure 6.1, terminal nodes left right (1 5) contain observations sources B, , D, C, E, order, different row order Table 6.2. Table 6.2: Classification tree predictions Jemez obsidian sources using five elements potential predictors. Table 6.3 contains improvement predicted group purity, measured Cp, estimated relative error rates standard errors obtained cross-validation tree procedure using Jemez obsidian source data. Table 6.3: Cp table classification tree Jemez obsidian sources using five elements potential predictors. ps_tree() function predict sources unknowns parameter predictSources TRUE parameter predictData specifies data unknowns. member list produced function named predictedSources (data frame) contains predicted source observation, analytic variables, , specified, sample ID. example using obsidian artifact data Table 6.4. member list named predictedTotals vector number unknowns predicted source; Table 6.5 contains results using obsidian data. Table 6.4: example data frame containing predicted sources obsidian artifacts classification tree Jemez obsidian sources using five elements potential predictors. locations artifact points principal components plot symbols predicted sources may useful evaluating reliability predictions. Figure 6.3 shows plot predictions classification tree analysis using function ps_pca() (artifact source removed, far artifacts). first two principal components explain 91% variance. One artifact predicted source C appears source D; twelve artifacts predicted source C appear source B. data frame containing data generating points obtained setting parameter Identify equal TRUE call ps_pca(). Figure 6.3: Principal components plot locations artifact sources classification tree model predictions.","code":"library(predictSource) data(ObsidianSources) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") tree <-   ps_tree(     data = ObsidianSources,     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = analyticVars,     Model = \"Sr\"+\"Nb\"+\"Rb\"+\"Y\"+\"Zr\",     ModelTitle = \"Sr + Nb + Rb + Y + Zr\",     plotCp = FALSE   ) data(ObsidianSources) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") tree <-   ps_tree(     data = ObsidianSources,     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = analyticVars,     Model = \"Sr\"+\"Nb\"+\"Rb\"+\"Y\"+\"Zr\",     ModelTitle = \"Sr + Nb + Rb + Y + Zr\",     plotTree = FALSE   ) data(ObsidianSources) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") tree <-   ps_tree(     data = ObsidianSources,     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = analyticVars,     Model = \"Sr\"+\"Nb\"+\"Rb\"+\"Y\"+\"Zr\",     ModelTitle = \"Sr + Nb + Rb + Y + Zr\",     plotCp = FALSE,     plotTree = FALSE   ) tree$Tree #> NULL library(predictSource) data(ObsidianSources) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") tree <-   ps_tree(     data = ObsidianSources,     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = analyticVars,     Model = \"Sr\"+\"Nb\"+\"Rb\"+\"Y\"+\"Zr\",     ModelTitle = \"Sr + Nb + Rb + Y + Zr\",     plotTree = FALSE,     plotCp = F   ) knitr::kable(tree$classification, caption = \"Table 6.2:  Classification tree predictions for the Jemez obsidian sources using five elements as potential predictors.\") %>%   kable_styling(full_width = F, position = \"center\") library(predictSource) data(ObsidianSources) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") tree <-   ps_tree(     data = ObsidianSources,     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = analyticVars,     Model = \"Sr\"+\"Nb\"+\"Rb\"+\"Y\"+\"Zr\",     ModelTitle = \"Sr + Nb + Rb + Y + Zr\",     plotTree = FALSE,     plotCp = F   ) knitr::kable(tree$CpTable, caption = \"Table 6.3:  Cp table from the classification tree for the Jemez obsidian sources using five elements as potential predictors.\") %>%   kable_styling(full_width = F, position = \"center\") data(ObsidianSources) data(ObsidianArtifacts) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") save_tree <-   ps_tree(     data = ObsidianSources,     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = analyticVars,     Model = \"Sr\"+\"Nb\"+\"Rb\"+\"Y\"+\"Zr\",     ModelTitle = \"Sr + Nb + Rb + Y + Zr\",     predictSources = TRUE,     unknownData = ObsidianArtifacts,     unknownID = \"ID\",     plotTree = FALSE,     plotCp = FALSE   ) knitr::kable(save_tree$predictedSource[1:5, ], caption = \"Table 6.4: An example of the data frame containing predicted sources of obsidian artifacts from the classification tree for the Jemez obsidian sources using five elements as potential predictors.\") %>%   kable_styling(full_width = F, position = \"center\") data(ObsidianSources) data(ObsidianArtifacts) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") tree <-   ps_tree(     data = ObsidianSources,     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = analyticVars,     ID = \"ID\",     Model = \"Sr\"+\"Nb\"+\"Rb\"+\"Y\"+\"Zr\",     ModelTitle = \"Sr + Nb + Rb + Y + Zr\",     plotTree = FALSE,     plotCp = F,     predictSources = TRUE,     unknownData = ObsidianArtifacts   ) predictedSource <-   tree$predictedSource[tree$predictedSource[, \"source\"] != \"A\", ] save_pca <-   ps_pca(     data = predictedSource,     ID = \"ID\",     GroupVar = \"source\",     Groups = \"All\",     AnalyticVars = analyticVars,     PlotEllipses = FALSE   )"},{"path":"https://benmarwick.github.io/predictSource/articles/Introduction.html","id":"random-forests","dir":"Articles","previous_headings":"","what":"7 RANDOM FORESTS","title":"Introduction to the predictSource package","text":"Random forests method obtaining realistic estimate classification error classification tree evaluating relative importance predictors trees. procedure repeats classification tree analysis large number times (default code, 500 times). analysis, code first selects bootstrap sample observations (random sample size, chosen replacement). sample chosen replacement, observations sample multiple times, appear. can shown approximately 1/3 observations appear (known “bag” observations). analysis, classification tree fit using random subsample predictor variables; default use approximately square root number predictors (user can change argument NvarUsed function, ps_randomForest()). resulting tree used predict source observations used analysis. error rate can computed difference predicted known group memberships. Random forests can also used predict group memberships observations unknown sources. , large number trees grown using bootstrap data samples subsample predictors. group membership predicted unknown. running trees, membership unknown observation defined commonly group predicted. predictions likely better classification single classification tree. sense, random forest analysis averaging predictions large number tree analyses. analyses completely independent, data used analyses overlap, may predictor variables. However, just averaging observations reduces variance estimated mean, averaging tree analyses produce estimates group membership accurate estimates single tree analysis. function ps_randomForest() random forest analysis known group membership using R function randomForest(). user can change number trees grown using parameter Ntrees number variables used parameter NvarUsed; default value NA, case code chooses value close square root number predictor variables. analysis reproducible random number generator used select bootstrap samples variables used specified starting value. desirable specify value, must positive integer; code default value 11111. Although R function randomForest() uses classification trees, function requires data analyzed (including data group membership predicted) missing values. function ps_randomForest() uses R function rfImpute() impute single value replace missing value data used define algorithm predicting group membership (obsidian data, sources) R function missForest() replace missing value data group membership predicted (obsidian data, artifacts). See Section 9 (Discussion) information functions. ps_randomForest() function produces two plots, estimated error rate function number bootstrap samples, importance variable based mean decrease Gini index result split variable. error rate plot shown Figure 7.1. Jemez source data, fewer 100 samples required obtain estimated bag error rate. set sources harder differentiate, required number samples likely much higher. Figure 7.1: Error rates random forest analysis Jemez obsidian source data. variable importance plot shown Figure 7.2, corresponding table saved component named “importance” function Table 7.1. corresponding estimates variable importance using summary() function Tree component list produced ps_tree() quite different: order variables Table 7.1, 24, 21, 16, 17, 23. Note sum 101, normalized, whereas estimates Table 7.1 sum 86. Although magnitudes necessarily comparable, ordering different: random forests estimates strontium important, third important ps_tree() estimate; rubidium modest importance using random forests estimate, important based ps_tree() estimate. Figure 7.2: Variable importance separating Jemez obsidian sources using random forest analysis. Table 7.1: Relative variable importance random forest model Jemez obsidian source data. accuracy classification random forest analysis reported component named “confusion” returned ps_randomForest(). Table 7.2 shows result Jemez obsidian source data. matrix “classification” object ps_tree(). Table 7.2: confusion matrix random forest model Jemez obsidian source data: accuracy classification. Setting parameter predictSources TRUE specifying data frame information unknowns (artifacts) parameter predictData yields predicted sources unknowns random forest analysis. Detailed information unknown member predictedSources list returned function. sample information data frame Table 7.3. predicted source, variable “source”, source greatest origin probability; data frame also includes estimated probability source origin. probability calculated number trees predicting unknown source, divided number trees grown (default, 500). data frame predictedTotals list returned function two rows (Table 7.4). first row tabulates number unknowns predicted source (using variable “source”); second row contains sum probabilities potential source. Note predictions first row agree estimates classification tree model Table 7.5 sources D different B C: 23 30 B, tree random forest predictions respectively, 38 31 C. Recall principal component plot Figure xxx using predicted sources obtained tree model suggested one artifact predicted B fact C, eight artifacts predicted C fact B. changes, predictions tree model agree predictions random forest analysis. Table 7.3: predicted source predicted source probabilities random forest model Jemez obsidian artifact data. Table 7.4: predicted number artifacts Jemez source random forest model Jemez obsidian artifact data. logical parameter plotSourceProbs set equal T, user obtains two box plots, Figures 7.3 7.4. figures provide information frequency number analytic variables used random forest analysis (case, 3) can predict source unknown correctly. first plot uses probability predicted source unknown; second uses probabilities. ignore single unknown predicted source . first plot, median probability 1 artifacts source C slightly less 1 artifacts sources B D. first quartile probabilities unknowns B smaller C D: unknowns source B harder predict C D using three analytic variables. second plot shows relatively large probabilities unknowns incorrectly assigned sources B C. Table 7.3 displays data data frame predictedSources yielding probabilities 0.19 0.30 (note single point plot can represent one unknown). unknown yielding large probability Figure 7.3b source B predicted source C; eight unknowns yielding large probabilities source C predicted source B; artifacts likely correspond apparent misclassifications tree model (verified creating data frame containing data generating points setting Identify equal TRUE using ps_pca() generate Figure 8.2c). Figure 8.3 shows principal components plot (using ps_pca()) artifacts predicted sources B, C, D (artifact eliminated, point far others); first two principal components also explain 91% variance plot Comparison Figure 6.3 analysis predictions tree model show artifacts apparently misclassified model may assigned correct source random forest analysis. Figure 7.3a: Box plots estimated probabilities predicted sources obsidian artifacts. Figure 7.3b: Box plots estimated probabilities sources predicted sources obsidian artifacts. Table 7.3: Rows relative large probabilities misclassification source C. Figure 7.4: Principal components plot predicted sources obsidian artifacts random forests analysis.","code":"data(ObsidianSources) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") saveRandomForest <-   ps_randomForest(     data = ObsidianSources,     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = analyticVars,     NvarUsed = 3,     plotImportance = FALSE   ) data(ObsidianSources) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") saveRandomForest <-   ps_randomForest(     data = ObsidianSources,     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = analyticVars,     NvarUsed = 3,     plotErrorRate = FALSE   ) data(ObsidianSources) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") saveRandomForest <-   ps_randomForest(     data = ObsidianSources,     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = analyticVars,     NvarUsed = 3,     plotImportance = FALSE,     plotErrorRate = FALSE   ) knitr::kable(saveRandomForest$importance, caption = \"Table 7.1: Relative variable importance in a random forest model for the Jemez obsidian source data.\") %>%   kable_styling(full_width = F, position = \"center\") data(ObsidianSources) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") saveRandomForest <-   ps_randomForest(     data = ObsidianSources,     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = analyticVars,     NvarUsed = 3,     plotImportance = FALSE,     plotErrorRate = FALSE   ) knitr::kable(saveRandomForest$confusion, caption = \"Table 7.2: The confusion matrix from a random forest model for the Jemez obsidian source data: accuracy of classification.\") %>%   kable_styling(full_width = F, position = \"center\") data(ObsidianSources) data(ObsidianArtifacts) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") saveRandomForest <-   ps_randomForest(     data = ObsidianSources,     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = analyticVars,     NvarUsed = 3,     plotErrorRate = FALSE,     plotImportance = FALSE,     predictSources = TRUE,     predictData = ObsidianArtifacts,     plotSourceProbs = FALSE   ) knitr::kable(   saveRandomForest$predictedSources[1:5, ],   caption = \"Table 7.3: The predicted source and predicted   source probabilities from a random forest model for the Jemez obsidian artifact data.\" ) %>%   kable_styling(full_width = F, position = \"center\") knitr::kable(   saveRandomForest$predictedTotals,   caption = \"Table 7.4: The predicted number of artifacts from   each Jemez source from a random forest model for the Jemez obsidian artifact data.\" ) %>%   kable_styling(full_width = F, position = \"center\") data(ObsidianSources) data(ObsidianArtifacts) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") saveRandomForest <-   ps_randomForest(     data = ObsidianSources,     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = analyticVars,     NvarUsed = 3,     plotErrorRate = FALSE,     plotImportance = FALSE,     predictSources = TRUE,     predictData = ObsidianArtifacts,     plotSourceProbs = TRUE   ) data(ObsidianSources) data(ObsidianArtifacts) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") saveRandomForest <-   ps_randomForest(     data = ObsidianSources,     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = analyticVars,     NvarUsed = 3,     plotErrorRate = FALSE,     plotImportance = FALSE,     predictSources = TRUE,     predictData = ObsidianArtifacts,     plotSourceProbs = TRUE   ) data(ObsidianSources) data(ObsidianArtifacts) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") saveRandomForest <-   ps_randomForest(     data = ObsidianSources,     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = analyticVars,     sourceID = \"ID\",     NvarUsed = 3,     plotErrorRate = FALSE,     plotImportance = FALSE,     predictSources = TRUE,     predictData = ObsidianArtifacts,     plotSourceProbs = FALSE   ) check <- saveRandomForest$predictedSources rows <- ((check[, \"C\"] > 0.14) & (check[, \"C\"] < 0.35)) checkC <- check[rows, ] orderedRows <- order(checkC[, \"C\"]) knitr::kable(checkC[orderedRows, ], caption = \"Table 7.3:  Rows with relative large probabilities of              misclassification to source C.\") %>%   kable_styling(full_width = F, position = \"center\") data(ObsidianSources) data(ObsidianArtifacts) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") saveRandomForest <-   ps_randomForest(     data = ObsidianSources,     GroupVar = \"Code\",     Groups = \"All\",     sourceID = \"ID\",     AnalyticVars = analyticVars,     NvarUsed = 3,     plotErrorRate = FALSE,     plotImportance = FALSE,     predictSources = TRUE,     predictData = ObsidianArtifacts,     plotSourceProbs = FALSE   ) predictedSources <-   saveRandomForest$predictedSources[saveRandomForest$predictedSources[, \"source\"] !=                                       \"A\", ] save_pca <-   ps_pca(     data = predictedSources,     ID = \"source\",     GroupVar = \"source\",     Groups = \"All\",     AnalyticVars = analyticVars,     PlotEllipses = FALSE   )"},{"path":"https://benmarwick.github.io/predictSource/articles/Introduction.html","id":"evaluation-of-the-predictions","dir":"Articles","previous_headings":"","what":"8 EVALUATION OF THE PREDICTIONS","title":"Introduction to the predictSource package","text":"suggest two analyses evaluating whether predicted sources artifacts correct: box plots similar Figure 4.2 (Figure 8.1), principal components plots. clear plots yttrium niobium Figure 8.1 tree analysis improperly assigned artifacts source C (one seems likely source D), perhaps one artifact improperly assigned source B. function generating principal components plots allow us identify data generating suspect assignments. Figure 8.1: Box plots yttrium niobium comparing Jemez obsidian sources obsidian artifacts assigned sources classification tree analysis. plot x.artifacts assigned source x. already seen utility principal component plots predictions tree random forest analysis evaluating predictions. tree analysis gives predictions appear wrong, predictions random forest analysis appear correct. function ps_pcaEvaluation() creates plots informative Figures 6.3 7.4 adding symbols artifact points generated predictions (contained data frame specified parameter ArtifactData) principal components plot convex hulls source data (specified parameter SourceData). data frame ArtifactData must contain variable predicted source point. points generated unknowns predicted come source fall within close convex hull source predictions correct. user specifies known sources predicted sources interest parameters known_sources predicted_sources, respectively. Defining parameter Identify TRUE allows user create data frame containing data generating points may represent misclassified unknowns. principal components analysis use observation missing data, function ps_pcaEvaluation() imputes values replace missing values. data known groups (source data), uses R function rfImpute; data unknowns predictions verified (artifacts), uses R function missForest. See Section 9 (Discussion) information imputation functions. evaluation function can produce three plots, shown Figures 8.2a, 8.2b, 8.2c, (parameters call function allow user specify plots produce). plots figures use predictions classification tree obtained ps_tree() model “Sr”+“Nb”+“Rb”+“Y”+“Zr”. plot plot first two principal components, obtained principal component analysis sources unknowns used analysis. first plot two panels: left panel plots source points convex hulls sources; right panel plots unknowns convex hulls sources. second plot also two panels: left panel plots source convex hulls labeled code source located median source points; right panel plots source hulls unknown points lie outside predicted source hull. third plot right panel second plot; plot useful identifying points interest generated unknowns. plot produced Identify = T. data frame checkData list returned function contains data generating points identified interest, well first two principal component values points. Figure 8.2a: Principal components plots Jemez obsidian source convex hulls source points (left panel) obsidian artifact points (right panel). artifacts labeled predicted source classification tree analysis. Figure 8.2b: Principal components plots Jemez obsidian source convex hulls source point medians (left panel) obsidian artifact points outside predicted source hulls (right panel). artifacts labeled predicted source classification tree analysis. Figure 8.2c: Principal components plot Jemez obsidian source convex hulls obsidian artifacts points outside convex hull predicted classification tree model. Eleven artifacts predicted source C close closer hull source B Figure 8.1c, well one point near right corner hull source D. Table 8.1 contains data generating eleven points. Since two pairs points close , difficult identify . Table 8.1: Artifacts may misidentified sources identified using Identify=TRUE ps_pcaEvaluation() fitting tree model. variable group predicted source model. contrast, corresponding plot based random forest analysis, artifacts predicted come sources generating convex hulls closest: see Figure 8.3. Figure 8.3: Principal components plot Jemez obsidian source convex hulls sources outside hulls using predictions random forests analysis. Finally, demonstrate utility using principal component plot verify source predictions made using 2- 3-dimensional scatterplots, Figure 8.4 performs evaluation using Steve Shackley’s artifact source predictions. see one artifact predicted source D falls inside convex hull source C. Using Identify=TRUE call ps_pcaEvaluation(), find artifact A17; values rubidium (225), yttrium (65), niobium (96) clearly agree corresponding values source C rather source D Table 3.2. Figure 8.4: Principal components plot Jemez obsidian source convex hulls obsidian artifacts points outside convex hull labeled Steve Shackley’s source predictions. Table 8.2 contains source assignment probability estimates random forests analysis artifacts tabulated Table 8.1, assigned source C classification tree analysis. can see value pc2, artifact A22 close hull source D; remaining artifacts close hull source B. artifacts probabilities arising source C 0.21 0.29; probabilities arising “correct”” source 0.71 0.79. can use descriptive statistics Table 3.2 verify random forest assignments artifacts correct. Based niobium values, artifacts clearly source C. yttrium value A22 agrees source D, values remaining artifacts match yttrium values source B. Thus, random forest source assignments appear correct, relatively large probability assignment source source greatest probability identifies artifact may warrant careful evaluation source assignment. Table 8.2: Random forest probability estimates artifacts may misidentified source C using tree model identified using Identify=TRUE ps_pcaEvaluation(). source predicted source random forest procedure.","code":"data(ObsidianSources) data(ObsidianArtifacts) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") sources <- unique(ObsidianSources[, \"Code\"]) saveTree <-   ps_tree(     data = ObsidianSources,     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = analyticVars,     Model = \"Sr\"+\"Nb\"+\"Rb\"+\"Y\"+\"Zr\",     ModelTitle = \"Sr + Nb + Rb + Y + Zr\",     predictSources = TRUE,     predictUnknowns = TRUE,     unknownData = ObsidianArtifacts,     unknownID = \"ID\",     plotTree = FALSE,     plotCp = FALSE   ) ObsidianSources <- ObsidianSources[, c(\"Code\", analyticVars)] Artifacts <-   saveTree$predictedSourceUnknowns[, c(\"predicted\", analyticVars)] SourcesCode <- as.vector(ObsidianSources[, \"Code\"], mode = \"character\") ArtifactsCode <-   as.vector(paste(Artifacts[, \"predicted\"], \"a\", sep = \".\"), mode = \"character\") Sources <- c(SourcesCode, ArtifactsCode) SourcesArtifacts <-   data.frame(rbind(ObsidianSources[, analyticVars], Artifacts[, analyticVars])) SourcesArtifacts <- data.frame(SourcesArtifacts, Source = Sources) boxPlots <-   ps_boxPlots(     data = SourcesArtifacts,     GroupVar = \"Source\",     Groups = \"All\",     AnalyticVars = c(\"Y\", \"Nb\"),     Nrow = 2,     Ncol = 1   ) data(ObsidianSources) data(ObsidianArtifacts) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") sources <- unique(ObsidianSources[, \"Code\"]) saveTree <-   ps_tree(     data = ObsidianSources,     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = analyticVars,     Model = \"Sr\"+\"Nb\"+\"Rb\"+\"Y\"+\"Zr\",     ModelTitle = \"Sr + Nb + Rb + Y + Zr\",     predictSources = TRUE,     unknownData = ObsidianArtifacts,     ID = \"ID\",     plotTree = FALSE,     plotCp = FALSE   ) pcaEval <-   ps_pcaEvaluation(     SourceData = ObsidianSources,     unknownData = saveTree$predictedSource,     SourceGroup = \"Code\",     unknownGroup = \"predicted\",     known_sources = sources,     predicted_sources = sources,     AnalyticVars = analyticVars,     plotAllPoints = TRUE,     plotHullsOutsidePoints = TRUE,     plotOutsidePoints = FALSE   ) data(ObsidianSources) data(ObsidianArtifacts) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") sources <- unique(ObsidianSources[, \"Code\"]) saveTree <-   ps_tree(     data = ObsidianSources,     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = analyticVars,     Model = \"Sr\"+\"Nb\"+\"Rb\"+\"Y\"+\"Zr\",     ModelTitle = \"Sr + Nb + Rb + Y + Zr\",     predictSources = TRUE,     unknownData = ObsidianArtifacts,     ID = \"ID\",     plotTree = FALSE,     plotCp = FALSE   ) pcaEval <-   ps_pcaEvaluation(     SourceData = ObsidianSources,     unknownData = saveTree$predictedSource,     SourceGroup = \"Code\",     unknownGroup = \"predicted\",     known_sources = sources,     predicted_sources = sources,     AnalyticVars = analyticVars,     plotAllPoints = TRUE,     plotHullsOutsidePoints = TRUE,     plotOutsidePoints = FALSE   ) data(ObsidianSources) data(ObsidianArtifacts) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") sources <- unique(ObsidianSources[, \"Code\"]) saveTree <-   ps_tree(     data = ObsidianSources,     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = analyticVars,     Model = \"Sr\"+\"Nb\"+\"Rb\"+\"Y\"+\"Zr\",     ModelTitle = \"Sr + Nb + Rb + Y + Zr\",     predictSources = TRUE,     unknownData = ObsidianArtifacts,     ID = \"ID\",     plotTree = FALSE,     plotCp = FALSE   ) pcaEval <-   ps_pcaEvaluation(     SourceData = ObsidianSources,     unknownData = saveTree$predictedSource,     SourceGroup = \"Code\",     unknownGroup = \"predicted\",     known_sources = sources,     predicted_sources = sources,     AnalyticVars = analyticVars,     ID = \"ID\",     plotAllPoints = TRUE,     plotHullsOutsidePoints = TRUE,     plotOutsidePoints = TRUE   ) data(tree.data.check) knitr::kable(tree.data.check, caption = \"Table 8.1: Artifacts which may have misidentified sources identified by using Identify=TRUE in ps_pcaEvaluation() after fitting a tree model.  The variable group is the predicted source from the model.\") %>%   kable_styling(full_width = F, position = \"center\") data(ObsidianSources) data(ObsidianArtifacts) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") sources <- unique(ObsidianSources[, \"Code\"]) saveRandomForest <-   ps_randomForest(     data = ObsidianSources,     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = analyticVars,     sourceID = \"ID\",     NvarUsed = 3,     plotErrorRate = FALSE,     plotImportance = FALSE,     predictSources = TRUE,     predictData = ObsidianArtifacts,     plotSourceProbs = FALSE   ) pcaEval <- ps_pcaEvaluation(   SourceData = ObsidianSources,   unknownData = saveRandomForest$predictedSources,   SourceGroup = \"Code\",   unknownGroup = \"source\",   known_sources = sources,   predicted_sources = sources,   AnalyticVars = analyticVars,   plotAllPoints = TRUE,   plotHullsOutsidePoints = TRUE,   plotOutsidePoints = TRUE ) data(ObsidianSources) data(ObsidianArtifacts) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") sources <- unique(ObsidianSources[, \"Code\"]) pcaEval <-   ps_pcaEvaluation(     SourceData = ObsidianSources,     unknownData = ObsidianArtifacts,     SourceGroup = \"Code\",     unknownGroup = \"Code\",     known_sources = sources,     predicted_sources = sources,     AnalyticVars = analyticVars,     ID = \"ID\",     plotAllPoints = TRUE,     plotHullsOutsidePoints = TRUE,     plotOutsidePoints = TRUE   ) data(ObsidianSources) data(ObsidianArtifacts) data(tree.data.check) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") sources <- unique(ObsidianSources[, \"Code\"]) saveRandomForest <-   ps_randomForest(     data = ObsidianSources,     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = analyticVars,     sourceID = \"ID\",     NvarUsed = 3,     plotErrorRate = FALSE,     plotImportance = FALSE,     predictSources = TRUE,     predictData = ObsidianArtifacts,     unknownID = \"ID\",     plotSourceProbs = FALSE   ) treeDataCheck <- tree.data.check[order(tree.data.check[, \"ID\"]), ] saveRF <-   saveRandomForest$predictedSources[order(saveRandomForest$predictedSources[, \"source\"]), ] obsCheck <- merge(   x = saveRF,   y = tree.data.check[, c(\"ID\", \"pc1\", \"pc2\")],   by = \"ID\",   x.all = FALSE,   y.all = FALSE ) knitr::kable(obsCheck, caption = \"Table 8.2: Random forest probability estimates for artifacts which may have  been misidentified as from source C using the tree model identified by using Identify=TRUE in ps_pcaEvaluation().  source is the predicted source from the random forest procedure.\") %>%   kable_styling(full_width = F, position = \"center\")"},{"path":"https://benmarwick.github.io/predictSource/articles/Introduction.html","id":"discussion","dir":"Articles","previous_headings":"","what":"9 Discussion","title":"Introduction to the predictSource package","text":"data demonstrate advantage using random forest analysis rather classification tree predict artifact sources. classification tree Figure 6.1 separates sources without error, seen choice rubidium splitting second node optimal (niobium much better). random forest analysis avoids error choosing random sets predictor variables, including sets without rubidium. proposed analysis procedure limitations. number samples per source must large enough using random forest analysis, seem recognized guidelines required sample sizes. seems likely sample sizes required increase separation sources decreases. results suggest , distribution predictors roughly multivariate Gaussian, 20 samples per source sufficient well-separated sources. Biau Scornet state “approach [random forests], combines several randomized decision trees aggregates predictions averaging, shown excellent performance settings number variables much larger number observations.” provide references analyses random forests effective. Several approaches provide information utility random forests particular data set. One obtained directly analysis --bag error estimate using source data. second possibility split source data training evaluation samples, perhaps multiple times, evaluate well analysis training sample predicts source membership evaluation sample; approach requires enough samples unknowns make useful splits. two predictor variables, using first two principal components evaluate validity source predictions requires strong enough correlations predictors first two principal components capture variance, predictors quantitative, qualitative. predictors qualitative, principal components analysis done using quantitative predictors. identify sources artifacts misclassified. first two principal components less likely adequate large number predictors. principal components evaluation plot may useful verifying validity assignments artifacts sources. evaluation identified two artifacts Shakely’s assignment wrong; one artifact ID A17 identified Section 8. analysis likely sources approximately 450 Pojoaque obsidian artifacts provides useful experience using procedures. analysis considered 24 possible obsidian sources (21 distinct locations Shakely’s data, two subdivided two three sources) provided 706 samples, samples sizes 15 64 per source. classification tree analysis separated sources quite well, estimated error rate 5%. analysis predicted artifacts came eight sources: four Jemez sources, one source west central New Mexico (Mount Taylor, southwest Jemez caldera), three sources farther west (two near New Mexico / Arizona border, one Arizona). Shackley assigned approximately 150 artifacts one Jemez sources; assignments known correct result appearance obsidian site. However, classification tree analysis predicted approximately 90% artifacts one sources (call source F) New Mexico / Arizona border. second analysis restricting candidate sources eight identified first analysis permits using principal components (PC) plot evaluate predictions. plot improved eliminating Mount Taylor source artifacts assigned source, since Mount Taylor data far removed sources PC plot. PC plot shows great majority points generated approximately 150 artifacts known Jemez source lie convex hulls Jemez source source F. initial PC plot 24 sources, plotting medians left panel Figure 8.2a, source data Jemez source source F quite close. fact, fact artifacts sources analyzed using different instruments, explain misclassification artifacts classification tree analysis. experience emphasized importance considering archaeological knowledge predicting sources artifacts.. Also, observed analyses may useful analysis, cluster analysis, used identify groups similar artifacts potential sources known. artifacts grouped, groupings can used several ways: principal components plot suggests well groups separated (first two components explain sufficient variance); random forests analysis estimates error using data form groups evaluates order variables used separate groups; classification tree analysis using ordering shows variables used group artifacts.","code":""},{"path":"https://benmarwick.github.io/predictSource/articles/Introduction.html","id":"code-use","dir":"Articles","previous_headings":"","what":"10 Code use","title":"Introduction to the predictSource package","text":"extent possible, functions package use standard set parameter names return list whose elements standard set names. section describes conventions provides information using functions package. Function parameters: function ps_createData() use parameters. following summary applies remaining functions. doc: character variable containing documentation usage, contents returned list element usage. default value function name; user can add information. data: data frame containing data analyzed. data frame must contain variable defining grouping variables (may quantitative qualitative) used predict group membership. highly desirable include ID variable (typically, lab ID). GroupVar: character variable defining variable containing grouping information. Groups: character variable defining groups used. “”, groups used; c(“”,”B”,”C”), groups , B, C used. “ “, grouping. AnalyticVars: vector character names variables used predict group membership. Additional parameters used many functions : ID: character variable name variable containing sample ID. Identify: logical variable (default F) functions create two-dimensional scatter plots. T, use can identify data creating points interest; data saved data frame dataCheck, returned function. Information using option . folder: character variable path folder results stored, typically one excel files. default value “ “, used results written externally. functions ps_tree() ps_randomForest() use: predictData: data frame data used predict sources unknowns (artifacts), including group analytic variables; users also want include sample ID. default values NA, case predictions made. Seed: integer used set random number generator function uses, results reproducible. function specifies default value; changing produce different analysis. value NA, random number generator produces initial value analysis replicated. Values returned function function returns list documenting use. Unless function creates plots, list contains data frames analysis results. functions return following: usage: character-valued object containing contents parameter doc, date code run, version R used run function. dataUsed: data frame containing data parameter data used analysis. groups used, dataUsed restricted groups actually used. analyticVars: character-valued vector value parameter AnalyticVars. paramsXX: One vectors lists containing values arguments parameters used define analysis done. E.g., paramsGrouping may vector values parameters GroupVar Groups. location: Unless function creates one plots, value parameter folder. dataCheck: Returned functions creating two-dimensional scatter plots. Identify F, value NA. Identify true user identifies points interest, dataCheck data frame containing data generating points. Using functions execute example code function documentation, user highlight section code documentation window showing function , windows operating system, use Control+Enter; macOS, use Cmd+Enter. Functions create one plot contain one comment lines command browser() plot stop function execution. user running code using base R, command allows user examine potentially save plot file. function must edited remove comment symbol (#). Rstudio, command necessary, user can examine set plots Plot window using back arrow. continue execution browser() executed, user enter c prompt. functions can produce one plot. ps_2dPlot(), ps_2dPlotGauss(), ps_3dPlot(), ps_3dPlotRotate(), ps_boxPlots(), ps_CV_corr(), ps_pairsPlot(), ps_pca(), ps_pcaEvaluation(), ps_pcaGaussian(), ps_randomForest(). Identify TRUE, user must interact plot continuing. identify point interest, place cursor close point possible left click. data creating point closest cursor added data frame dataCheck. Repeat points interest. points identified (point identified), user must end interaction: Windows operating system, right click; Rstudio, click Finish upper right corner plot window. Code functions ps_pca(), ps_pcaEvaluation(), ps_randomForest() use R functions rfImpute() missForest() impute single values missing values analytic variables. code uses function rfImpute() group observation known (obsidian data, source). algorithm first replaces missing value median non-missing values variable, runs random forest analysis completed data, finally replaces missing value weighted average values missing variable; weights proportional frequency observations terminal node. code uses function missForest() group observation known (obsidian data, artifacts). iterative procedure uses random forest analysis use non-missing data predict missing value; iteration continues stopping criterion met based comparing previous current complete data sets. function computes --bag (OOB) error estimate returned current implementation. examples, see vignette function Steckhoven. Note procedures imputes single missing values. Using single missing value analysis underestimates uncertainty results. example, current statistical practice regression analysis missing values requires analysis multiple times (typically, 5 10 adequate) set imputed values representing uncertainties imputations, combining regression results appropriate way (variance estimates include variability individual analysis results). Therefore, analyses imputed values treated cautiously, especially substantial proportion missing values.","code":""},{"path":"https://benmarwick.github.io/predictSource/articles/Introduction.html","id":"references","dir":"Articles","previous_headings":"","what":"11 References","title":"Introduction to the predictSource package","text":"G Biau E Scornet. random forest guided tour. http://www.normalesup.org/~scornet/paper/test.pdf JM Chambers, WS Cleveland, B Kleiner, PA Tukey. Graphical Methods Data Analysis. Duxbury Press, Boston, 1983. RB D’Agostino MA Stephens, eds. Goodness--Fit Techniques, Marcel Dekker, New York, 1986. PJ Farrell, M Salibian-Barrera, K Naczk. tests multivariate normality associated simulation studies. J Statistical Computation Simulation 77, 1065-1080, 2007. https://doi.org/10.1080/10629360600878449 G James, D Witten, T Hastie, R Tibshirani. Introduction Statistical Learning Applications R. Springer, New York, 2014. RA Johnson DW Wichern. Applied Multivariate Statistical Analysis. Prentice-Hall, Englewood Cliffs, NJ, 1982. C Molnar. Interpretable Machine Learning. https://christophm.github.io/interpretable-ml-book/ DJ Steckhoven. Using missForest package. https://stat.ethz.ch/education/semesters/ss2012/ams/paper/missForest_1.2.pdf C Strobl, J Malley, G Tutz. introduction recursive partitioning: rationale, application, characteristics classification regression trees, bagging, random forests. Psychological Mathods 14, 323-348, 2009. doi: 10.1037/a0016973. http://www.ncbi.nlm.nih.gov/pubmed/19968396 TM Therneau E. Atkinson. Introduction Recursive Partitioning Using RPART Routines. https://cran.r-project.org/web/packages/rpart/vignettes/longintro.pdf RW Oldford. Self-Calibrating Quantile–Quantile Plots. American Statistician, vol. 70, 2016, 74-90","code":""},{"path":"https://benmarwick.github.io/predictSource/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ben Marwick. Author, maintainer. John Karon. Author. Steven Shakley. Author.","code":""},{"path":"https://benmarwick.github.io/predictSource/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Marwick B, Karon J, Shakley S (2023). predictSource: Compositional Data Analysis Archaeological Artefacts. R package version 0.1.0, https://benmarwick.github.io/predictSource/.","code":"@Manual{,   title = {predictSource: Compositional Data Analysis of Archaeological Artefacts},   author = {Ben Marwick and John Karon and Steven Shakley},   year = {2023},   note = {R package version 0.1.0},   url = {https://benmarwick.github.io/predictSource/}, }"},{"path":"https://benmarwick.github.io/predictSource/index.html","id":"predictsource","dir":"","previous_headings":"","what":"Compositional Data Analysis of Archaeological Artefacts","title":"Compositional Data Analysis of Archaeological Artefacts","text":"package predictSource provides functions verify data can used separate sources samples, predict sources additional samples, create plots evaluate validity predictions. Data can quantitative qualitative. proposed analysis strategy use random forests evaluate whether data can separate sources identify important predictors many, use classification tree understand data used separate sources, use random forests predict sources unknown samples, evaluate validity predictions ploting first two principal components unknowns convex hulls known sources. random forest analysis also produces probabilities assignment source sample; can helpful identifying unknowns difficult classify.package also contains functions exploratory data analysis (descriptive statistics, 2- 3-dimensional plots [latter can rotated], tests 1- 2-dimensional Gaussian distributions [helpful identifying outliers]) multivariate analysis (principal components). detailed vignette provides examples use function (using obsidian data examples) background classification trees, random forests, checking Gaussian distributions. motivation package predicting sources obsidian artifacts. Archaeologists geochemists usually using 2- 3-dimensional scatterplots. functions package make predictions much faster can done scatterplots; principal components graphic identifies objects may misclassified. Archaeological knowledge also used making predictions. figure shows principal components plots using data sets composition five elements five obsidian sources predicted sources 91 artifacts, predictions made scatterplots (see vignette information data sets). left-hand plot shows convex hulls first two principal components source data. second plot shows locations artifacts outside respective predicted source convex hulls. plot clearly identifies one misclassified artifact (predicted source D inside convex hull source C); remaining artifacts appear correctly classified. data, random forests predictions appear correct artifacts. Principal components plot Jemez obsidian source convex hulls obsidian artifacts points outside convex hull labeled source predictions based scatterplots. figure random forests analysis artifacts. figure contains box plots source assignment probabilities artifact, excluding probabilities assignment predicted source. plot identifies artifacts assignment difficult. Source C potentially concern. user can create data frame information artifacts may likely misclassified. See vignette details. Figure 7.3b: Box plots estimated probabilities sources predicted sources obsidian artifacts.","code":"library(predictSource) data(ObsidianSources) data(ObsidianArtifacts) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") sources <- unique(ObsidianSources[, \"Code\"]) pcaEval <-   ps_pcaEvaluation(     SourceData = ObsidianSources,     unknownData = ObsidianArtifacts,     SourceGroup = \"Code\",     unknownGroup = \"Code\",     known_sources = sources,     predicted_sources = sources,     AnalyticVars = analyticVars,     ID = \"ID\",     plotAllPoints = TRUE,     plotHullsOutsidePoints = TRUE,     plotOutsidePoints = TRUE   ) library(predictSource) data(ObsidianSources) data(ObsidianArtifacts) analyticVars <- c(\"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\") saveRandomForest <-   ps_randomForest(     data = ObsidianSources,     GroupVar = \"Code\",     Groups = \"All\",     AnalyticVars = analyticVars,     NvarUsed = 3,     plotErrorRate = FALSE,     plotImportance = FALSE,     predictSources = TRUE,     predictData = ObsidianArtifacts,     plotSourceProbs = TRUE   ) #> Warning in (function (z, notch = FALSE, width = NULL, varwidth = FALSE, : some #> notches went outside hinges ('box'): maybe set notch=FALSE #> Warning in (function (z, notch = FALSE, width = NULL, varwidth = FALSE, : some #> notches went outside hinges ('box'): maybe set notch=FALSE"},{"path":"https://benmarwick.github.io/predictSource/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Compositional Data Analysis of Archaeological Artefacts","text":"can install predictSource GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"benmarwick/predictSource\")"},{"path":"https://benmarwick.github.io/predictSource/reference/ObsidianArtifacts.html","id":null,"dir":"Reference","previous_headings":"","what":"Chemical composition of obsidian artifacts — ObsidianArtifacts","title":"Chemical composition of obsidian artifacts — ObsidianArtifacts","text":"data set containing data five elements 91 obsidian artifacts Pojoaque Valley north central New Mexico.  element presence values (parts per million) obtained using x-ray fluorescence Steve Shackley's laboratory Albuquerque, New Mexico (using different instrument one used analyze obsidian source data).","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ObsidianArtifacts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chemical composition of obsidian artifacts — ObsidianArtifacts","text":"","code":"ObsidianArtifacts"},{"path":"https://benmarwick.github.io/predictSource/reference/ObsidianArtifacts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Chemical composition of obsidian artifacts — ObsidianArtifacts","text":"data frame 91 rows 7 variables: Code one-character variable code Jemez source identified Shackely   using 2- 3-dimensional scatterplot ID character variable artificial lab ID; first character   ; remaining characters 1:91 Rb rubidium value Sr strontium value Y ytterbium value Zr zirconium value Nb niobium value","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ObsidianArtifacts.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Chemical composition of obsidian artifacts — ObsidianArtifacts","text":"data random sample (30 three Jemez sources predicted Shackely, plus single sample predicted another source) data set approximately 450 artifacts provided state New Mexico Office Archaeological Studies (unpublished).","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ObsidianSources.html","id":null,"dir":"Reference","previous_headings":"","what":"Documentation for data sets — ObsidianSources","title":"Documentation for data sets — ObsidianSources","text":"Chemical composition obsidian sources","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ObsidianSources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Documentation for data sets — ObsidianSources","text":"","code":"ObsidianSources"},{"path":"https://benmarwick.github.io/predictSource/reference/ObsidianSources.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Documentation for data sets — ObsidianSources","text":"data frame 113 rows 7 variables: Code one-character variable source code: , B, C, D, E, F ID character variable artificial lab ID; first character   value Code; remaining characters 1:n, n samples source Rb rubidium value Sr strontium value Y ytterbium value Zr zirconium value Nb niobium value","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ObsidianSources.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Documentation for data sets — ObsidianSources","text":"Data Steve Shackley's website http://www.swxrflab.net/   files provided Shackley.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ObsidianSources.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Documentation for data sets — ObsidianSources","text":"data set containing data five elements 113 obsidian samples five sources Jemez caldera north central New Mexico.  element presence values (parts per million) obtained using x-ray fluorescence laboratory University California Berkeley.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/RbNb.pvalues.html","id":null,"dir":"Reference","previous_headings":"","what":"p-values for testing whether the bivariate Rb/Nb distribution is Gaussian\n at two Jemez sources. — RbNb.pvalues","title":"p-values for testing whether the bivariate Rb/Nb distribution is Gaussian\n at two Jemez sources. — RbNb.pvalues","text":"data set containing p-values univariate bivariate tests.  labels rows codes Jemez sources.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/RbNb.pvalues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"p-values for testing whether the bivariate Rb/Nb distribution is Gaussian\n at two Jemez sources. — RbNb.pvalues","text":"","code":"RbNb.pvalues"},{"path":"https://benmarwick.github.io/predictSource/reference/RbNb.pvalues.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"p-values for testing whether the bivariate Rb/Nb distribution is Gaussian\n at two Jemez sources. — RbNb.pvalues","text":"matrix 2 rows 6 variables: AD.Rb vector results Anderson-Darling test   Rb univariate Gaussian distribution. AD.Nb vector results Anderson-Darling test   Nb univariate Gaussian distribution. SW.Rb vector results Shapiro-Wilk test   Rb univariate Gaussian distribution. SW.Nb vector results Shapiro-Wilk test   Nb univariate Gaussian distribution. Marida.skew vector results Mardia test   bivariate Gaussian distribution based skewness. Marida.kurtosis vector results Mardia test   bivariate Gaussian distribution based kurtosis.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/RbNb.pvalues.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"p-values for testing whether the bivariate Rb/Nb distribution is Gaussian\n at two Jemez sources. — RbNb.pvalues","text":"matrix output function ps_2dPlotGauss().","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/RbZr.pvalues.html","id":null,"dir":"Reference","previous_headings":"","what":"p-values for testing whether the bivariate Rb/Zr distribution is Gaussian\n at two Jemez sources. — RbZr.pvalues","title":"p-values for testing whether the bivariate Rb/Zr distribution is Gaussian\n at two Jemez sources. — RbZr.pvalues","text":"data set containing p-values univariate bivariate tests.  labels rows codes Jemez sources.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/RbZr.pvalues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"p-values for testing whether the bivariate Rb/Zr distribution is Gaussian\n at two Jemez sources. — RbZr.pvalues","text":"","code":"RbZr.pvalues"},{"path":"https://benmarwick.github.io/predictSource/reference/RbZr.pvalues.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"p-values for testing whether the bivariate Rb/Zr distribution is Gaussian\n at two Jemez sources. — RbZr.pvalues","text":"matrix 2 rows 6 variables: AD.Rb vector results Anderson-Darling test   Rb univariate Gaussian distribution. AD.Zr vector results Anderson-Darling test   Zr univariate Gaussian distribution. SW.Rb vector results Shapiro-Wilk test   Rb univariate Gaussian distribution. SW.Zr vector results Shapiro-Wilk test   Zr univariate Gaussian distribution. Marida.skew vector results Mardia test   bivariate Gaussian distribution based skewness. Marida.kurtosis vector results Mardia test   bivariate Gaussian distribution based kurtosis.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/RbZr.pvalues.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"p-values for testing whether the bivariate Rb/Zr distribution is Gaussian\n at two Jemez sources. — RbZr.pvalues","text":"matrix output function ps_2dPlotGauss().","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/as_checkData.html","id":null,"dir":"Reference","previous_headings":"","what":"as_CheckData — as_checkData","title":"as_CheckData — as_checkData","text":"Data checks summaries: duplicate records, negative analytic values, numbers analytic results, percentiles results","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/as_checkData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"as_CheckData — as_checkData","text":"","code":"as_checkData(   doc = \"as_CheckData\",   data,   CheckDupVars,   GroupVar = \" \",   Groups,   ID = \" \",   AnalyticVars,   folder = \" \" )"},{"path":"https://benmarwick.github.io/predictSource/reference/as_checkData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"as_CheckData — as_checkData","text":"doc character string written output list; default function name data R object (data frame) containing analytic data CheckDupVars vector names identifying variables, typically group lab ID GroupVar groups, name variable defining groups, default value \" \": grouping Groups character vector groups numbers samples statistics statistics tabulated  default value \" \": tabulations done entire data set  value = \"\": tabulation distinct code GroupVar ID name lab ID, default \" \" (lab ID) AnalyticVars character vector names analytic variables tabulations done folder path folder data frames saved; default \" \" #``","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/as_checkData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"as_CheckData — as_checkData","text":"Four data frames duplicate observations, observations negative       values one analytic variables, numbers observations analytic       variable, statistics statistics (quartiles number missing)       Groups != \" \", numbers observations statistics statistics group   list following components:  usage:  string contents argument doc, date run, R version used dataUsed:  data frame specified argument data GroupVar| params:  character vector values CheckDupVars, GroupVar, Groups analyticVars:  vector names specified argument AnalyticVars Duplicates:  data frame containing observations duplicate values NegativeValues:  data frame containing observations least one negative value variable AnalyticVars Nvalues:  data frame contain number observations value analytic variable statistics:  data frame containing statistics statistics (group, Group specified) location:  folder != \" \", path folder data frames saved","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/as_checkData.html","id":"detail","dir":"Reference","previous_headings":"","what":"Detail","title":"as_CheckData — as_checkData","text":"AnalyticVars must vector length least 2.  Groups specifies selected groups (equal \"\" \" \"), must vector length least 2.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/as_checkData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"as_CheckData — as_checkData","text":"","code":"data(ObsidianSources) analyticVars<-c(\"Rb\",\"Sr\",\"Y\",\"Zr\",\"Nb\") dataCheck<-as_checkData(data=ObsidianSources,CheckDupVars=analyticVars,GroupVar=\"Code\",Groups=\"All\", ID = \"ID\", AnalyticVars=analyticVars)"},{"path":"https://benmarwick.github.io/predictSource/reference/ps_2dPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"ps_2dPlot — ps_2dPlot","title":"ps_2dPlot — ps_2dPlot","text":"Create 2-dimensional scatter plots, using ps_plot().","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_2dPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ps_2dPlot — ps_2dPlot","text":"","code":"ps_2dPlot(   doc = \"ps_2dPlot\",   data,   GroupVar,   AnalyticVars,   ID = \"none\",   Groups,   ByGroup = FALSE,   PlotAllGroups = FALSE,   VariablePairs,   PlotPoints = TRUE,   LowessLine = TRUE,   Lowess_f = NA,   PlotMedians = FALSE,   PlotEllipses = FALSE,   Ellipses = c(0.95, 0.99),   KernelSmooth = FALSE,   Kernelwidth = 0.3,   PlotHulls = FALSE,   parRowsCols = c(2, 2),   Colors = c(\"red\", \"black\", \"blue\", \"green\", \"purple\"),   legendLoc = \"topleft\",   Identify = FALSE )"},{"path":"https://benmarwick.github.io/predictSource/reference/ps_2dPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ps_2dPlot — ps_2dPlot","text":"doc string documenting use written output list; default function name data data frame containing data analyzed GroupVar name variable defining grouping; can \" \" grouping AnalyticVars names analytic variables used ID character value name lab ID, \"none\" (default) none Groups vector values GroupVar plots done; \"\", use groups; \" \", grouping ByGroup Logical.  TRUE, show scatterplot group selection 2 variables; FALSE (default),  specified groups one plot PlotAllGroups Logical.  TRUE (default FALSE), groups one one plot, group membership shown.  PlotEllipses TRUE, confidence ellipses also shown. VariablePairs names two analytic variables shown plots, vector length 2 matrix 2 columns; matrix, set plots produced row. PlotPoints Logical.  TRUE (default), points plotted; FALSE, points plotted LowessLine Logical. TRUE, lowess line plotted group; FALSE, line plotted Lowess_f parameter lowess() less equal 1, defining range x-values used; NA (default), uses default value 0.67 PlotMedians TRUE, code group plotted median values group; default FALSE PlotEllipses Logical.  TRUE, Gaussian confidence ellipses plotted group; F (default), ellipses plotted Ellipses single value vector values confidence values ellipses; default c(0.95,0.99) KernelSmooth Logical.  TRUE, kernel smooth plotted group; FALSE (default), kernel smooth plotted Kernelwidth proportion range x-values used kernel smooth; default 0.3 PlotHulls TRUE, convex hull drawn set points; FALSE (default), hulls drawn parRowsCols vector length 2, numbers rows columns plot plots shown group; default c(2,2) Colors vector colors plotted points, used sequentially groups legendLoc Character.  Identifies location legend plot showing groups one plot.  Default \"topleft\"; alternatives \"bottomleft\", \"topright\", \"bottomright\" Identify TRUE, user can identify points interest plots; default FALSE","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_2dPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ps_2dPlot — ps_2dPlot","text":"usage:  string contents argument doc, date run, version R used dataUsed:  contents argument data restricted groups used dataNA:  data frame observations containing least one missing value analysis variable, NA missing values params:  list values grouping, logical,  numeric Color arguments analyticVars:  vector value argument AnalyticVars dataCheck:  ps_identify = TRUE, data frame information user-identified points  interest","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_2dPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ps_2dPlot — ps_2dPlot","text":"multiple plots, execution halts page complete; enter c (continue) prompt continue execution.  plot labelled convex hulls groups, see example code required combination logical arguments.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_2dPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ps_2dPlot — ps_2dPlot","text":"","code":"# All Jemez obsidian sources on one plot data(ObsidianSources) analyticVars<-c(\"Rb\",\"Nb\",\"Zr\",\"Y\",\"Sr\") temp<-ps_2dPlot(data=ObsidianSources,GroupVar=\"Code\",Groups=\"All\",ByGroup=FALSE, AnalyticVars=analyticVars,VariablePairs=c(\"Rb\",\"Nb\"),PlotEllipses=TRUE,PlotAllGroups=TRUE)   # Plots of obsidian source data for each source with confidence ellipses and lowess lines data(ObsidianSources) analyticVars<-c(\"Rb\",\"Nb\",\"Zr\",\"Y\",\"Sr\") temp<-ps_2dPlot(data=ObsidianSources,GroupVar=\"Code\",Groups=\"All\",ByGroup=TRUE, AnalyticVars=analyticVars,VariablePairs=c(\"Rb\",\"Nb\"),PlotEllipses=TRUE,PlotAllGroups=FALSE)    # Plot of the labelled convex hulls of the obsidian source data for each source data(ObsidianSources) analyticVars<-c(\"Rb\",\"Nb\",\"Zr\",\"Y\",\"Sr\") temp<-ps_2dPlot(data=ObsidianSources,GroupVar=\"Code\",Groups=\"All\",ByGroup=FALSE, AnalyticVars=analyticVars,VariablePairs=c(\"Rb\",\"Nb\"),PlotEllipses=FALSE,LowessLine=FALSE, PlotHulls=TRUE,PlotMedians=TRUE,PlotPoints=FALSE)"},{"path":"https://benmarwick.github.io/predictSource/reference/ps_2dPlotGauss.html","id":null,"dir":"Reference","previous_headings":"","what":"ps_2dPlotGauss — ps_2dPlotGauss","title":"ps_2dPlotGauss — ps_2dPlotGauss","text":"Plot check specified pairs analysis variables bivariate normality.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_2dPlotGauss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ps_2dPlotGauss — ps_2dPlotGauss","text":"","code":"ps_2dPlotGauss(   doc = \"ps_2dPlotGauss\",   data,   GroupVar,   ID,   Groups,   AnalyticVars,   variablePair,   scatterplot = TRUE,   QQPlot = TRUE,   pvalue_digits = 3,   Identify = FALSE,   folder = \" \" )"},{"path":"https://benmarwick.github.io/predictSource/reference/ps_2dPlotGauss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ps_2dPlotGauss — ps_2dPlotGauss","text":"doc string documenting use written output list; default function name data matrix data frame containing data analyzed GroupVar name variable defining grouping, \" \" grouping ID name variable lab ID, \" \" lab ID used Groups vector values group variable plots done; \"\", use groups; \" \", grouping AnalyticVars vector names analytic variables interest variablePair vector length 2 names variables shown plots scatterplot Logical (default TRUE): specify whether show scatter plots QQPlot = FALSE QQPlot Logical (default TRUE): specify whether show q-q plots bootstrap envelopes multivariate plots pvalue_digits Numeric (default 3): number significant digits retained tests normality Identify Logical(default FALSE): TRUE, user can identify points interest plots folder path folder data frames saved; default \" \"","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_2dPlotGauss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ps_2dPlotGauss — ps_2dPlotGauss","text":"list following components:  usage:  String contents argument doc, date run, version R used dataUsed: contents argument data restricted groups used dataNA:  data frame observations containing least one missing value   analysis variable, NA missing values analyticVars:  vector contents argument analyticVars variablePair:  vector contents argument variablePair params:  list values grouping, logical, numberic arguments pvalues:  data frame p-values univariate bivariate tests normality dataCheck: Identify=TRUE, data frame information user-identified points interest location: value parameter folder","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_2dPlotGauss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ps_2dPlotGauss — ps_2dPlotGauss","text":"QQPlot = TRUE, default page panes two rows three columns  (new page successive groups). function stops producing row   plot.  Enter c (\"continue\") prompt get next plot.   QQPlot = FALSE, standard qq plots shown, function stops producing   page.   See vignette information: visualizing plot, information obtained    using package qqtest, tests bivariate normality, identifying points interest.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_2dPlotGauss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ps_2dPlotGauss — ps_2dPlotGauss","text":"","code":"data(ObsidianSources) analyticVars<-c(\"Rb\",\"Nb\",\"Zr\",\"Y\",\"Sr\") plot_2d_Gauss<-ps_2dPlotGauss(data=ObsidianSources, GroupVar=\"Code\", ID=\"ID\", Groups=c(\"A\",\"B\"),    AnalyticVars= analyticVars, variablePair=c(\"Rb\",\"Zr\"))"},{"path":"https://benmarwick.github.io/predictSource/reference/ps_3dPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"ps_3dPlot — ps_3dPlot","title":"ps_3dPlot — ps_3dPlot","text":"Create 3-dimensional data plot. function stops producing plot. Enter c (\"continue\") prompt get next plot. function run using Rstudio, plot appears separate window, Rstudio plot pane.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_3dPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ps_3dPlot — ps_3dPlot","text":"","code":"ps_3dPlot(   doc = \"ps_3dPlot\",   data,   GroupVar,   Groups,   AnalyticVars,   Selections,   ByGroup = FALSE,   PlotMedians = FALSE,   Colors = c(\"red\", \"black\", \"blue\", \"green\", \"purple\"),   SymbolSize = 0.7 )"},{"path":"https://benmarwick.github.io/predictSource/reference/ps_3dPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ps_3dPlot — ps_3dPlot","text":"doc string documenting use written output list; default function name data matrix data frame containing data analyzed GroupVar name variable defining grouping Groups vector values group variable plots done; \"\", use groups AnalyticVars vector names (character values) analytic variables Selections vector length 3, matrix data frame 3 columns, combinations analytic variables plotted ByGroup Logical.  TRUE, show scatterplot group selection 3 variables; FALSE (default),  specified groups one plot PlotMedians Logical.  TRUE, plot medians group (points plotted).  FALSE (default), median locations plotted Colors vector colors plotted points, used sequentially groups SymbolSize value 1, smaller value gives smaller diameter points","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_3dPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ps_3dPlot — ps_3dPlot","text":"list following components:  usage:  string contents argument doc, date run, version R used dataUsed:  contents argument data restricted groups used dataNA:  data frame observations containing least one missing value analysis variable, NA missing values params:  list values grouping, logical,  numeric Color arguments analyticVars:  vector value argument AnalyticVars","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_3dPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ps_3dPlot — ps_3dPlot","text":"See vignette information: visualizing plot,  specification argument Selections matrix data frame,   use colors.  plot plots group,   points color first element Colors.   PlotMedians = TRUE, value ByGroup used.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_3dPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ps_3dPlot — ps_3dPlot","text":"","code":"#  show points from several groups on one plot data(ObsidianSources) analyticVars<-c(\"Rb\",\"Sr\",\"Y\",\"Zr\",\"Nb\") plot3d<-ps_3dPlot(data=ObsidianSources, GroupVar=\"Code\", Groups=c(\"A\",\"B\"), AnalyticVars=analyticVars, Selections=rbind(analyticVars[1:3],analyticVars[2:4]))    #  plots with one group per plot data(ObsidianSources) analyticVars<-c(\"Rb\",\"Sr\",\"Y\",\"Zr\",\"Nb\") plot3d<-ps_3dPlot(data=ObsidianSources, GroupVar=\"Code\", Groups=c(\"A\",\"B\"),  ByGroup=TRUE, AnalyticVars=analyticVars, Selections=analyticVars[1:3])"},{"path":"https://benmarwick.github.io/predictSource/reference/ps_3dPlotRotate.html","id":null,"dir":"Reference","previous_headings":"","what":"ps_3dPlotRotate — ps_3dPlotRotate","title":"ps_3dPlotRotate — ps_3dPlotRotate","text":"Create 3-dimensional data plot(s) can rotated","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_3dPlotRotate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ps_3dPlotRotate — ps_3dPlotRotate","text":"","code":"ps_3dPlotRotate(   doc = \"ps_3dPlotRotate\",   data,   GroupVar,   Groups,   AnalyticVars,   Selections,   ByGroup = FALSE,   ptSize = 5,   Colors = c(\"red\", \"black\", \"blue\", \"green\", \"purple\"),   folder = \" \",   dsFile )"},{"path":"https://benmarwick.github.io/predictSource/reference/ps_3dPlotRotate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ps_3dPlotRotate — ps_3dPlotRotate","text":"doc string documenting usage written list return, default function name data data frame containing data analyzed GroupVar name variable defining grouping; group variable must specified Groups vector values group variable plots done; \"\": use groups;\" \": grouping AnalyticVars vector names (character values) analytic results Selections vector length 3, matrix data frame 3 columns, combinations plotted ByGroup Logical. TRUE, show scatterplot group selection 3 variables; default FALSE ptSize size plotted points, default 5 (larger value gives larger points) Colors vector color(s) plotted points; default vector red, black, blue, green, purple folder folder one files images saved; default \" \" (files saved) dsFile complete path file folder image saved; folder \" \", must valid path file name (ends .pdf current function)","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_3dPlotRotate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ps_3dPlotRotate — ps_3dPlotRotate","text":"list following components: usage  string contents argument doc, date run, version R used dataUsed  contents argument data restricted groups used dataNA:  data frame observations containing least one missing value   analysis variable, NA missing values params  list values grouping, logical, numerical, Color arguments analyticVars  vector value argument AnalyticVars selections  vector matrix value argument Selections location  value argument folder","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_3dPlotRotate.html","id":"","dir":"Reference","previous_headings":"","what":"ps_3dPlotRotate — ps_3dPlotRotate","title":"ps_3dPlotRotate — ps_3dPlotRotate","text":"Details: See vignette details use colors.  rotated 3d plot can saved file located dsFile.  code saves file pdf; see documentation function rgl.postscript() changing format postscript, eps, tex, others.  Point sizes may appear much larger saved file monitor.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_3dPlotRotate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ps_3dPlotRotate — ps_3dPlotRotate","text":"","code":"data(ObsidianSources) analyticVars<-c(\"Rb\",\"Sr\",\"Y\",\"Zr\",\"Nb\") plot_3d_rotate<-ps_3dPlotRotate(data=ObsidianSources, GroupVar=\"Code\", Groups=c(\"A\",\"B\"),               AnalyticVars = analyticVars, Selections=analyticVars[1:3],ByGroup=TRUE)  # two plots data(ObsidianSources) analyticVars<-c(\"Rb\",\"Sr\",\"Y\",\"Zr\",\"Nb\") plot_3d_rotate<-ps_3dPlotRotate(data=ObsidianSources, GroupVar=\"Code\", Groups=c(\"A\",\"B\"),                                 AnalyticVars = analyticVars,                                 Selections=rbind(analyticVars[1:3],analyticVars[2:4]))"},{"path":"https://benmarwick.github.io/predictSource/reference/ps_CV_corr.html","id":null,"dir":"Reference","previous_headings":"","what":"ps_CV_corr — ps_CV_corr","title":"ps_CV_corr — ps_CV_corr","text":"Compute coefficients variation correlations specified analytic values, specified groups, plots visualize correlations. Observations missing values removed computations using .","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_CV_corr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ps_CV_corr — ps_CV_corr","text":"","code":"ps_CV_corr(   doc = \"ps_CV_corr\",   data,   GroupVar,   Groups = \"All\",   ByGroup = TRUE,   ID = \" \",   AnalyticVars,   Transpose = TRUE,   CV_digits = 2,   corr_digits = 2,   plotCorrs = TRUE,   folder = \" \" )"},{"path":"https://benmarwick.github.io/predictSource/reference/ps_CV_corr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ps_CV_corr — ps_CV_corr","text":"doc string documentation, default function name data AR matrix data frame containing data analyzedfn GroupVar name variable defining grouping; \" \", grouping Groups Character valued defining groups used_  Options Vector values group variable; \"\" (default; use groups); \" \", grouping ByGroup TRUE (default), results returned group Groups; FALSE, groups combined ID name variable lab ID (used sorting data), default \" \" AnalyticVars vector names (character values) analytic results Transpose See Details CV_digits number significant digits CV estimates, default 2 corr_digits number significant digits correlation estimates, default 2 plotCorrs Logical, TRUE (default), create matrix plots describing correlations folder path folder data frames saved; default \" \"","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_CV_corr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ps_CV_corr — ps_CV_corr","text":"list following components:  usage:  vector contents argument doc, date run, version R used dataUsed:  contents argument data restricted groups used dataNA:  data frame observations containing least one missing value   analysis variable, NA missing values params:  list containing values grouping,logical, numeric parameters analyticVars:  vector value argument AnalyticVars CV:  data frame coefficients variation analytic variable group corr:  data frame correlations pairs variables group location:  value parameter folder","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_CV_corr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ps_CV_corr — ps_CV_corr","text":"Transpose=TRUE, correlation matrix rows defined group variable    columns defined pairs analytic variables_  Transpose=FALSE,     rows defined pairs analytic variables columns defined groups.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_CV_corr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ps_CV_corr — ps_CV_corr","text":"","code":"#  All sources combined data(ObsidianSources) analyticVars<-c(\"Rb\",\"Sr\",\"Y\",\"Zr\",\"Nb\") CV_corr<-ps_CV_corr(data = ObsidianSources, GroupVar=\"Code\", Groups = \"All\",  AnalyticVars=analyticVars, ByGroup=FALSE)   #  By source, restricted to two sources data(ObsidianSources) analyticVars<-c(\"Rb\",\"Sr\",\"Y\",\"Zr\",\"Nb\") CV_corr<-ps_CV_corr(data = ObsidianSources, GroupVar=\"Code\", Groups = c(\"A\",\"B\"),  AnalyticVars=analyticVars, ByGroup=TRUE)"},{"path":"https://benmarwick.github.io/predictSource/reference/ps_boxPlots.html","id":null,"dir":"Reference","previous_headings":"","what":"ps_boxPlots — ps_boxPlots","title":"ps_boxPlots — ps_boxPlots","text":"Box plots specified analytic values, specified groups.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_boxPlots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ps_boxPlots — ps_boxPlots","text":"","code":"ps_boxPlots(   doc = \"ps_boxPlots\",   data,   GroupVar,   Groups,   AnalyticVars,   Nrow,   Ncol )"},{"path":"https://benmarwick.github.io/predictSource/reference/ps_boxPlots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ps_boxPlots — ps_boxPlots","text":"doc string documenting use, included list returned; default value function name data data frame matrix data analyzed GroupVar name variable defining grouping (required) Groups vector values group variable plots done; '', use groups: ' ', grouping AnalyticVars vector names (character values) analytic results analyzed Nrow number rows plots page Ncol number columns plots page","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_boxPlots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ps_boxPlots — ps_boxPlots","text":"list following components:  usage:  string value argument doc, date run,  version R used dataUsed:  data frame data restricted data used  box plots dataNA:  data frame observations containing least one  missing value analysis variable, NA missing values params:  list elements containing values grouping  numeric parameters analyticVars:  vector value argument AnalyticVars","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_boxPlots.html","id":"details","dir":"Reference","previous_headings":"","what":"DETAILS","title":"ps_boxPlots — ps_boxPlots","text":"function creates one plot, code stops  displayed; enter c (continue) prompt display next plot.  Groups specifies one group, code group displayed  plot.  observation variable value missing,   variables without missing values used corresponding box plots.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_boxPlots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ps_boxPlots — ps_boxPlots","text":"","code":"data(ObsidianSources) boxPlots<-ps_boxPlots(data=ObsidianSources, GroupVar=\"Code\", Groups=\"All\", AnalyticVars=c(\"Rb\",\"Nb\", \"Zr\",\"Sr\"),Nrow=2,Ncol=2) #> Warning: some notches went outside hinges ('box'): maybe set notch=FALSE #> Warning: some notches went outside hinges ('box'): maybe set notch=FALSE #> Warning: some notches went outside hinges ('box'): maybe set notch=FALSE #> Warning: some notches went outside hinges ('box'): maybe set notch=FALSE   # side-by-side box plots of each source and artifacts assigned to that source data(ObsidianSources) data(ObsidianArtifacts) analyticVars<-c(\"Rb\",\"Sr\",\"Y\",\"Zr\",\"Nb\") ObsidianSources<-ObsidianSources[,c(\"Code\",analyticVars)] Artifacts <- ObsidianArtifacts[,c(\"Code\",analyticVars)] SourcesCode <- as.vector(ObsidianSources[,\"Code\"], mode=\"character\") ArtifactsCode <- as.vector(paste(Artifacts[,\"Code\"],\"A\",sep=\"_\"),mode=\"character\") Codes <- c(SourcesCode, ArtifactsCode) SourcesArtifacts <- data.frame(rbind(ObsidianSources,Artifacts)[,analyticVars], Code = Codes) boxPlots<-ps_boxPlots(data=SourcesArtifacts, GroupVar=\"Code\", Groups=\"All\", AnalyticVars=\"Rb\",Nrow=1,Ncol=1) #> Warning: some notches went outside hinges ('box'): maybe set notch=FALSE"},{"path":"https://benmarwick.github.io/predictSource/reference/ps_checkData.html","id":null,"dir":"Reference","previous_headings":"","what":"ps_checkData — ps_checkData","title":"ps_checkData — ps_checkData","text":"Data checks summaries: duplicate records, negative analytic values,  numbers analytic results, percentiles results","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_checkData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ps_checkData — ps_checkData","text":"","code":"ps_checkData(   doc = \"ps_checkData\",   data,   CheckDupVars,   GroupVar,   Groups = \"All\",   ByGroup = TRUE,   ID = \" \",   AnalyticVars,   folder = \" \" )"},{"path":"https://benmarwick.github.io/predictSource/reference/ps_checkData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ps_checkData — ps_checkData","text":"doc character string written output list; default function name data R object (data frame) containing analytic data CheckDupVars vector names identifying variables, typically group lab ID GroupVar name variable defining groups (required) Groups character vector groups numbers samples statistics tabulated \"\" ByGroup Logical: default TRUE. FALSE, tabulations groups combined ID name lab ID, default \" \" (lab ID) AnalyticVars character vector names analytic variables tabulations done folder path folder data frames saved; default \" \", path","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_checkData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ps_checkData — ps_checkData","text":"function returns list following components  usage:  string contents argument doc, date run, R version used dataUsed:  data frame specified argument data GroupVar params:  character vector values CheckDupVars, GroupVar, Groups analyticVars:  vector names specified argument AnalyticVars Duplicates:  data frame containing observations duplicate values NegativeValues:  data frame containing observations least one negative  value variable AnalyticVars Nvalues:  data frame contain number observations value analytic variable statistics:  data frame containing descriptive statistics (group, ByGroup = TRUE) location:  value parameter folder","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_checkData.html","id":"detail","dir":"Reference","previous_headings":"","what":"Detail","title":"ps_checkData — ps_checkData","text":"AnalyticVars must vector length least 2.  Groups specifies selected groups (equal \"\"), must vector length least 2.  function returns list four data frames: duplicate observations, observations negative values one analytic variables, numbers observations analytic variable, descriptive statistics (quantiles number missing). largest values < 10 (true use log10 transforms), descriptive statistics rounded 2 digits, otherwise integers. ByGroup=TRUE, numbers observations statistics statistics group.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_checkData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ps_checkData — ps_checkData","text":"","code":"data(ObsidianSources) analyticVars<-c(\"Rb\",\"Sr\",\"Y\",\"Zr\",\"Nb\") dataCheck<-ps_checkData(data=ObsidianSources,CheckDupVars=analyticVars,GroupVar=\"Code\",Groups=\"All\", ByGroup=TRUE, ID = \"ID\", AnalyticVars=analyticVars)"},{"path":"https://benmarwick.github.io/predictSource/reference/ps_convexHull.html","id":null,"dir":"Reference","previous_headings":"","what":"ps_convexHull — ps_convexHull","title":"ps_convexHull — ps_convexHull","text":"Compute corners convex hull plot hull: used ps_pcaEvaluation()","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_convexHull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ps_convexHull — ps_convexHull","text":"","code":"ps_convexHull(data, groupVar, hullGroup)"},{"path":"https://benmarwick.github.io/predictSource/reference/ps_convexHull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ps_convexHull — ps_convexHull","text":"data R matrix data frame containing data analyzed groupVar name variable defining grouping; group variable required hullGroup code defining group hull plotted","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_convexHull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ps_convexHull — ps_convexHull","text":"function returns matrix points defining corners convex hull.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_convexHull.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ps_convexHull — ps_convexHull","text":"function assumes data frame data (argument) contains group codes GroupVar two principal components, named pc1 pc2.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_createData.html","id":null,"dir":"Reference","previous_headings":"","what":"ps_createData — ps_createData","title":"ps_createData — ps_createData","text":"Create data frame data analyzed, columns specified order","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_createData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ps_createData — ps_createData","text":"","code":"ps_createData(doc = \"ps_createData\", data, Group, Subset, ID, AnalyticVars)"},{"path":"https://benmarwick.github.io/predictSource/reference/ps_createData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ps_createData — ps_createData","text":"doc Documentation, default function name data Data frame containing data one group Group Character: user-specified grouping code data, added data set Subset Character: name variable codes subsets samples, \" \" subsets ID Character: name IDs (typically lab IDs) samples AnalyticVars Character vector names elements used data","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_createData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ps_createData — ps_createData","text":"list elements:  usage:  Documentatation, including function name, version R used, date run) dataUsed:  Data used, restricted specified group analyticVars:  value AnalyticVars dataOut:  data frame created function, Group, Subset (specified), ID, analytic variables","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_createData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ps_createData — ps_createData","text":"function creates data frame columns specified order.  useful combining multiple data frames one analysis object using rbind().  name specified variable must file used argument data; space variable name excel file imported R yields variable name followed period.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_createData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ps_createData — ps_createData","text":"","code":"# create example data set by restricting to one group, removing column with group code, # then adding that code back to the data set data(ObsidianSources) ps_createData(data = ObsidianSources[(ObsidianSources[,\"Code\"] == \"A\"),][,-1],           Group = \"A\",           Subset = \" \",           ID = \"ID\",           AnalyticVars = c(\"Rb\",\"Sr\",\"Y\",\"Zr\",\"Nb\")) #> $usage #> [1] \"ps_createData Fri Jul 14 06:45:02 2023 R version 4.3.1 (2023-06-16)\" #>  #> $analyticVars #> [1] \"Rb\" \"Sr\" \"Y\"  \"Zr\" \"Nb\" #>  #> $dataOut #>    Group  ID  Rb Sr  Y  Zr Nb #> 1      A  A1 121 40 23 110 55 #> 2      A  A2 117 43 21 110 53 #> 3      A  A3 121 44 24 114 49 #> 4      A  A4 116 41 22 112 52 #> 5      A  A5 118 43 21 111 55 #> 6      A  A6 123 44 25 113 53 #> 7      A  A7 117 44 23 108 50 #> 8      A  A8 115 54 20 113 40 #> 9      A  A9 106 39 21 106 50 #> 10     A A10 113 36 19 107 46 #> 11     A A11 109 42 18 110 51 #> 12     A A12 110 41 20 104 50 #> 13     A A13 116 36 21 107 51 #> 14     A A14 123 38 27 113 56 #> 15     A A15 116 42 23 114 53 #>"},{"path":"https://benmarwick.github.io/predictSource/reference/ps_pairsPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"ps_pairsPlot — ps_pairsPlot","title":"ps_pairsPlot — ps_pairsPlot","text":"Pairs plots specified analytic values, specified groups","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_pairsPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ps_pairsPlot — ps_pairsPlot","text":"","code":"ps_pairsPlot(   doc = \"ps_pairsPlot\",   data,   GroupVar,   Groups,   AnalyticVars,   Span = 2/3 )"},{"path":"https://benmarwick.github.io/predictSource/reference/ps_pairsPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ps_pairsPlot — ps_pairsPlot","text":"doc string documenting use added output list, default function name data matrix data frame containing data analyzed GroupVar name variable defining grouping (required) Groups vector values group variable plots done; \"\": use groups; \" \": grouping AnalyticVars vector names (character values) analytic results Span value >0, <=1 defining proportion data used estimate lowess smooth. default value (2/3) default value lowess function.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_pairsPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ps_pairsPlot — ps_pairsPlot","text":"set pairs plots described list following components: usage:  vector value argument doc, date run, version R used dataUsed:  data frame observations data restricted groups analyzed dataNA:  data frame observations containing least one missing value   analysis variable, NA missing values analyticVars:  vector specified parameter AnalyticVars params:  list values grouping numeric arguments analyticVars:  vector value argument AnalyticVars","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_pairsPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"DETAILS","title":"ps_pairsPlot — ps_pairsPlot","text":"function produces pairs plot lowess smooth scatter plot   pair variables AnalyticVars.  Groups != \" \", scatter plot   group Groups.  Groups=\" \", one pairs plot data groups.   Executing function produces warnings (\"span graphical parameter\") can   ignored (changing value Span change lowess smooths). coded, RStudio plots produced without pause; use back arrow plot pane see  plots.  base R, remove comment symbol (#) browser command end final loop,  function stop producing plot.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_pairsPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ps_pairsPlot — ps_pairsPlot","text":"","code":"data(ObsidianSources) analyticVars<-c(\"Rb\",\"Sr\",\"Y\",\"Zr\",\"Nb\") pairsPlot <- ps_pairsPlot(data=ObsidianSources, GroupVar=\"Code\", Groups=\"All\", AnalyticVars=analyticVars) #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter  #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter  #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter  #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter  #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter #> Warning: \"span\" is not a graphical parameter"},{"path":"https://benmarwick.github.io/predictSource/reference/ps_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"ps_pca — ps_pca","title":"ps_pca — ps_pca","text":"Compute plot principal components standardizing data","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ps_pca — ps_pca","text":"","code":"ps_pca(   doc = \"ps_pca\",   data,   ID = \" \",   GroupVar,   Groups,   AnalyticVars,   ScreePlot = FALSE,   BoxPlots = FALSE,   pcPlot = TRUE,   PlotPoints = TRUE,   PlotEllipses = TRUE,   PlotHull = FALSE,   PlotMedians = FALSE,   Ellipses = c(0.95, 0.99),   PlotColors = TRUE,   legendLoc = \"topright\",   Colors = c(\"red\", \"black\", \"blue\", \"green\", \"purple\"),   Identify = FALSE,   digits = 3,   Seed = 11111,   folder = \" \" )"},{"path":"https://benmarwick.github.io/predictSource/reference/ps_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ps_pca — ps_pca","text":"doc string documentation list returned, default function name data matrix data frame containing data analyzed ID optional name ID, default \" \" ID GroupVar name variable defining grouping; variable name required Groups Character-valued defining values group variable plots done.  Options vector values;  \"\" (use groups).  One required AnalyticVars vector names (character values) analytic results ScreePlot Logical, TRUE create scree plot, default FALSE BoxPlots Logical, TRUE, create box plots first two components, default FALSE pcPlot Logical, TRUE (default), create plot first two components PlotPoints Logical, TRUE (default) pcPlot=TRUE, plot points first two components PlotEllipses Logical, TRUE (default), plot confidence ellipse ellipses group PlotHull Logical, TRUE, plot convex hull group, default FALSE PlotMedians Logical, TRUE, plot symbol group median point group, default FALSE Ellipses value vector proportions confidence ellipses; default c(.95,.99) produce 95% 99% confidence ellipses PlotColors Logical.  TRUE, use list colors Colors points; F, plot points black legendLoc Character, location legend plot points; default \"topright\", alternatives combinations \"top\", \"bottom\",  \"right\", \"left\" Colors vector color names; default vector five names Identify Logical.  TRUE, user can identify points interest plots; information points saved file; default FALSE digits number significant digits return objects data frames, default 3 Seed NA, seed random number generator used missing data imputed; default 11111 folder path folder data frames saved; default \" \"","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ps_pca — ps_pca","text":"function produces plot first two principal components, contents defined arguments PlotPoints, PlotEllipses, PlotHull,  PlotMedians. scree plot box plots produced requested.  function returns list following components: usage:  string contents argument doc, date run, version R used dataUsed:  contents argument data restricted groups used dataNA:  data frame observations containing least one missing value   analysis variable, NA missing values params:  list values arguments grouping, logical parameters,   Ellipses, Colors analyticVars:  vector value argument AnalyticVars ellipse_pct:  value argument Ellipses variances:  data frame including percent variation explained   principal component cumulative percent explained weights:  data frame principal component weights observation Predicted:  data frame predicted values principal component,    plus value Groups integer GroupIndex (values 1:number Groups) DataPlusPredicted:  data frame data used compute principal components,    plus GroupIndex (defined ) predicted values principal component dataCheck:  Identify=TRUE, data frame observations dataUsed    identified interest location:  value parameter folder","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_pca.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ps_pca — ps_pca","text":"Identify=TRUE, user must interact plot (pane,  one pane plot). identify point,  place cursor close possible point left click;  repeat desired. go next pane, right click select \"Stop\" base R; click \"Finish\" plot pane Rstudio.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ps_pca — ps_pca","text":"","code":"data(ObsidianSources) analyticVars<-c(\"Rb\",\"Sr\",\"Y\",\"Zr\",\"Nb\") save_pca <- ps_pca(data=ObsidianSources, ID=\"ID\", GroupVar=\"Code\", Groups=\"All\", AnalyticVars=analyticVars)"},{"path":"https://benmarwick.github.io/predictSource/reference/ps_pcaEvaluation.html","id":null,"dir":"Reference","previous_headings":"","what":"ps_pcaEvaluation — ps_pcaEvaluation","title":"ps_pcaEvaluation — ps_pcaEvaluation","text":"Create principal component plots evaluate validity source predictions:  plots show convex hulls data used create tree random forest analysis  points predictions plotted hulls.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_pcaEvaluation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ps_pcaEvaluation — ps_pcaEvaluation","text":"","code":"ps_pcaEvaluation(   doc = \"ps_pcaEvaluation\",   SourceData,   unknownData,   ID = \" \",   SourceGroup,   unknownGroup,   known_sources,   predicted_sources,   AnalyticVars,   Identify = FALSE,   legendLoc = \"topright\",   plotAllPoints = TRUE,   plotHullsOutsidePoints = TRUE,   plotOutsidePoints = TRUE,   Seed = 11111,   folder = \" \" )"},{"path":"https://benmarwick.github.io/predictSource/reference/ps_pcaEvaluation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ps_pcaEvaluation — ps_pcaEvaluation","text":"doc string documentation, default function name SourceData data frame data known sources, including code location element analyses unknownData corresponding data unknowns ID name ID samples (unknowns), \" \" none (default value) SourceGroup name variable code source unknownGroup name variable code predicted source known_sources vector source locations considered predicted_sources vector predicted sources considered, need known_sources AnalyticVars elements used principal component analyses Identify Logical.  TRUE, user can identify unknowns interest obtain data set information unknowns (default FALSE) legendLoc location legend added plots (alternates \"topleft\", \"bottomright\",\"bottomleft\") plotAllPoints Logical.  TRUE (default), show plot two panes: source points    convex hulls sources, unknown points source hulls plotHullsOutsidePoints Logical.  TRUE (default), show plot two panes: source points convex hulls sources, unknown points lying outside predicted source convex hulls hulls plotOutsidePoints Logical.  TRUE (default), show plot one pane: athe unknown points lying outside predicted source convex hulls  hulls (second pane plotHullsOutsidePoints) Seed NA, positive integer used initialize random number generator missing data imputed_  Default value 11111 folder path folder data frames saved; default \" \"","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_pcaEvaluation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ps_pcaEvaluation — ps_pcaEvaluation","text":"See vignette instructions identifying points interest using paramter Identify = TRUE. .@return function produces two plots: convex hulls first two principal components source data, plot convex hulls unknown data (plot uses principal component analysis source unknown data). function returns list following components: usage:  vector contents argument doc, date run,   version R used sourceData:  contents argument SourceData restricted knownSources sourcesNA: data frame source observations missing data analytic   variables; NA missing data unknownData:  contents argument unknownData restricted predictedSources unknownsNA: data frame unknown observations missing data analytic   variables; NA missing data impError  Normalized root mean square error estimate imputed data;   NA missing data params:  list values grouping source arguments   values logical arguments analyticVars:  vector value argument AnalyticVars tableInOut:   data frame counts numbers unknowns inside   outside predicted source location ptsOutside:    data frame data unknown points located outside    predicted source dataCheck:  Identify=TRUE, data frame observations dataUsed identified    interest; value c(NA,NA) points identified location:  value parameter folder","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_pcaEvaluation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ps_pcaEvaluation — ps_pcaEvaluation","text":"","code":"# Evaluate the predicted sources of source samples from a tree model, # Since all predictions are correct, all predictions are inside the source hulls. data(ObsidianSources) analyticVars<-c(\"Rb\",\"Sr\",\"Y\",\"Zr\",\"Nb\") sources <- unique(ObsidianSources[,\"Code\"]) save_tree <- ps_tree(data=ObsidianSources, GroupVar=\"Code\",Groups=\"All\",  AnalyticVars=analyticVars, ID=\"ID\", Model = \"Rb\"+\"Sr\"+\"Y\"+\"Zr\"+\"Nb\",   ModelTitle=\"Rb + Sr + Y + Zr + Nb\", predictSources=TRUE, predictUnknowns=FALSE,   plotTree=TRUE, plotCp=FALSE)  pca_eval <- ps_pcaEvaluation(SourceData=ObsidianSources,   unknownData=save_tree$predictedSource, SourceGroup= \"Code\", unknownGroup=\"predicted\",   known_sources=sources, predicted_sources=sources, AnalyticVars=analyticVars, ID=\"ID\",   plotAllPoints=TRUE, plotHullsOutsidePoints = TRUE, plotOutsidePoints = TRUE)     # Evaluate Shackley's predicted sources of obsidian artifacts (predicted using scatterplots) data(ObsidianSources) data(ObsidianArtifacts) analyticVars<-c(\"Rb\",\"Sr\",\"Y\",\"Zr\",\"Nb\") sources <- unique(ObsidianSources[,\"Code\"]) save_tree <- ps_tree(data=ObsidianSources, GroupVar=\"Code\",Groups=\"All\",  AnalyticVars=analyticVars, ID=\"ID\", Model = \"Rb\"+\"Sr\"+\"Y\"+\"Zr\"+\"Nb\",   ModelTitle=\"Rb + Sr + Y + Zr + Nb\", predictSources=FALSE, predictUnknowns=TRUE,   unknownData=ObsidianArtifacts, unknownID=\"ID\",   plotTree=TRUE, plotCp=FALSE)  pca_eval <- ps_pcaEvaluation(SourceData=ObsidianSources,   unknownData=save_tree$predictedSourceUnknowns, SourceGroup= \"Code\", unknownGroup=\"predicted\",   known_sources=sources, predicted_sources=sources, AnalyticVars=analyticVars, ID=\"ID\",   plotAllPoints=TRUE, plotHullsOutsidePoints = TRUE, plotOutsidePoints = TRUE)     # Evaluate the predicted artifact sources from a random forest analysis: #     plot only points outside the predicted source hull data(ObsidianSources) data(ObsidianArtifacts) analyticVars<-c(\"Rb\",\"Sr\",\"Y\",\"Zr\",\"Nb\") sources <- unique(ObsidianSources[,\"Code\"]) save_randomForest <- ps_randomForest(data=ObsidianSources,   GroupVar=\"Code\",Groups=\"All\",   AnalyticVars=analyticVars, unknownID=\"ID\", NvarUsed=3,   plotErrorRate=FALSE, plotImportance=FALSE,   predictSources=TRUE, predictData=ObsidianArtifacts, plotSourceProbs=FALSE) pca_eval <- ps_pcaEvaluation(SourceData=ObsidianSources,   unknownData=save_randomForest$predictedSources, SourceGroup= \"Code\",    unknownGroup=\"source\",  known_sources=sources, predicted_sources=sources,     AnalyticVars=analyticVars, ID=\"ID\", plotAllPoints=FALSE,      plotHullsOutsidePoints = FALSE, plotOutsidePoints = TRUE)"},{"path":"https://benmarwick.github.io/predictSource/reference/ps_pcaGaussian.html","id":null,"dir":"Reference","previous_headings":"","what":"ps_pcaGaussian — ps_pcaGaussian","title":"ps_pcaGaussian — ps_pcaGaussian","text":"Check whether first two principal components Gaussian","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_pcaGaussian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ps_pcaGaussian — ps_pcaGaussian","text":"","code":"ps_pcaGaussian(   doc = \"ps_pcaGaussian\",   data,   GroupVar,   Groups,   gaussID = \" \",   analyticVars,   varPair = c(\"PC1\", \"PC2\"),   qqPlot = TRUE,   gaussIdentify = FALSE,   folder = \" \" )"},{"path":"https://benmarwick.github.io/predictSource/reference/ps_pcaGaussian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ps_pcaGaussian — ps_pcaGaussian","text":"doc Documentation analysis, default function name data R matrix data frame containing data analyzed GroupVar name variable defining grouping; group variable required Groups vector values group variable plots done; \"\"', use groups gaussID optional name ID, default \" \" ID analyticVars vector names (character values) analytic results varPair vector names (character values) variable pair analyzed, default first two principal components qqPlot Logical, Q-Q plots (univariate bootstrap envelope, multivariate) shown; default TRUE gaussIdentify Logical, user identify points interest, default FALSE folder path folder data frames saved; default \" \"","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_pcaGaussian.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ps_pcaGaussian — ps_pcaGaussian","text":"function returns list following components: usage: vector contents argument doc, date run, version R used dataUsed: contents argument data restricted groups used dataNA:  data frame observations containing least one missing value   analysis variable, NA missing values params_grouping: list values arguments GroupVar Groups analyticVars: vector value argument analyticVars params_logical: value QQtest p_values: data frame p-values Gaussian assumptions    group specified dataCheck:  data frame data identified generating points interest;  value NA points identified location: value parameter folder","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_pcaGaussian.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ps_pcaGaussian — ps_pcaGaussian","text":"function uses function ps_2dPlotGauss().  function produces p-values  univariate multivariate tests normality.  produces Q-Q plots  first two principal components group, well plots bootstrap  envelopes bivariate Q-Q plot qqPlot=TRUE.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_pcaGaussian.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ps_pcaGaussian — ps_pcaGaussian","text":"","code":"data(ObsidianSources) analVars<-c(\"Rb\",\"Sr\",\"Y\",\"Zr\",\"Nb\") pca_Gauss <- ps_pcaGaussian(data=ObsidianSources, GroupVar=\"Code\",Groups=c(\"A\",\"B\"),   analyticVars=analVars)"},{"path":"https://benmarwick.github.io/predictSource/reference/ps_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"ps_plot — ps_plot","title":"ps_plot — ps_plot","text":"Create 2-dimensional scatter plot one group: used ps_2dPlot().  internal function.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ps_plot — ps_plot","text":"","code":"ps_plot(   data,   ps_groupVar,   ps_byGroup,   ps_plotAllGroups,   useVars,   plotPoints,   lowessLine,   lowess_f,   plotMedians,   kernelSmooth,   kernelWidth,   locPoly,   plotHulls,   plotEllipses,   ps_ellipses,   groupIndex,   ps_colors,   ps_legend,   ps_identify )"},{"path":"https://benmarwick.github.io/predictSource/reference/ps_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ps_plot — ps_plot","text":"data data frame containing data analyzed ps_groupVar Character.  Optional name grouping variable. ps_byGroup Logical.  TRUE, plots created group. ps_plotAllGroups Logical.  TRUE, groups one one plot, identifying information useVars vector length 2: names two analytic variables shown plots plotPoints Logical.  TRUE, points plotted; FALSE, points plotted lowessLine Logical. TRUE, lowess line plotted group; FALSE, line plotted lowess_f parameter lowess() less equal 1, defining range x-values used plotMedians Logical. TRUE, median value group plotted code group kernelSmooth Logical.  TRUE, kernel smooth plotted group; FALSE, kernel smooth plotted kernelWidth proportion range x-values used kernel smooth locPoly Logical.  TRUE, fit local linear polynomial bandwidth selected using data.  Currently used. plotHulls Logical. TRUE, convex hull drawn set points; FALSE, hulls drawn plotEllipses Logical.  TRUE, Gaussian confidence ellipses plotted group; FALSE, ellipses plotted ps_ellipses single value vector values confidence values ellipses groupIndex Integer.  Used specify plotting character color multiple groups shown one plot. ps_colors Character vector plotting colors multiple groups shown one plot ps_legend Character, specifying location legend multiple groups shown one plot ps_identify Logical. TRUE, user can identify points interest plots","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ps_plot — ps_plot","text":"user identifies points interest:  dataCheck:  ps_identify = TRUE, data frame information user-identified points  interest; value c(NA,NA) points identified","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ps_plot — ps_plot","text":"function used internally function ps_2dPlot.  default values  ps_2dPlot.  data contain group code, lab ID (used data set),  analytic variables, display user identifies points interest.  plotMedians TRUE,  convex hull median points plotted group.  package fANACOVA (required  use function lowess.()) available current version R.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_plotGauss.html","id":null,"dir":"Reference","previous_headings":"","what":"ps_plotGauss — ps_plotGauss","title":"ps_plotGauss — ps_plotGauss","text":"Function plot check specified pair analysis variables bivariate normality.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_plotGauss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ps_plotGauss — ps_plotGauss","text":"","code":"ps_plotGauss(   data,   ps_groupVar,   ps_pair,   ps_scatterplot,   ps_qqPlot,   ps_identify )"},{"path":"https://benmarwick.github.io/predictSource/reference/ps_plotGauss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ps_plotGauss — ps_plotGauss","text":"data matrix data frame containing data analyzed ps_groupVar name variable defining grouping, \" \" grouping ps_pair vector length two names two analytic variables shown plots ps_scatterplot Logical: specify whether show scatter plots ps_qqPlot = FALSE ps_qqPlot Logical: specify whether show q-q plots bootstrap envelopes multivariate plots ps_identify Logical: TRUE, user can identify points interest plots #' @return   data frame ps_identify = FALSE) list following components: pvalues data frame p-values univariate bivariate tests normality dataCheck ps_identify = TRUE, data frame information user-identified points interest; otherwise, NA","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_randomForest.html","id":null,"dir":"Reference","previous_headings":"","what":"ps_randomForest — ps_randomForest","title":"ps_randomForest — ps_randomForest","text":"Implements random forest analysis source data, predicts sources unknowns requested","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_randomForest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ps_randomForest — ps_randomForest","text":"","code":"ps_randomForest(   doc = \"ps_randomForest\",   data,   GroupVar,   Groups = \"All\",   AnalyticVars,   sourceID = \" \",   Ntrees = 500,   NvarUsed = NA,   Seed = 11111,   digitsImportance = 1,   plotErrorRate = TRUE,   plotImportance = TRUE,   predictSources = FALSE,   predictData = NA,   unknownID = \" \",   plotSourceProbs = TRUE,   folder = \" \" )"},{"path":"https://benmarwick.github.io/predictSource/reference/ps_randomForest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ps_randomForest — ps_randomForest","text":"doc Documentation function use added model usage, default value function name data data frame data used grow trees (source data predictions made) GroupVar name variable defining groups, grouping required Groups vector codes groups used, '' use groups AnalyticVars vector names (character-valued) analytic variables sourceID \" \" (default), name variable sample ID source data Ntrees number trees grown, default value 500 randomForest function NvarUsed NA (default), number variables use random forest call rpart; NA, rpart uses default value randomForest()  (square root number candidate variables) Seed NA, random number generator seed produce reproducible results; default value 11111 digitsImportance number significant digits importance measure, default 1 plotErrorRate Logical, whether show error rate plot, default TRUE plotImportance Logical, whether show plot variable importance, default TRUE predictSources Logical; T, predict sources data predictData; default FALSE predictData data frame matrix data used predict sources observations, must contain variables AnalyticVars_ unknownID \" \" (default), name variable sample ID artifact data plotSourceProbs Logical, TRUE (default) predictSources=TRUE, show box plots source probabilities folder path folder data frames saved; default \" \"","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_randomForest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ps_randomForest — ps_randomForest","text":"function returns list following components: usage: string contents argument doc, date run, version R used dataUsed: contents argument data restricted groups used sourcesNA:  data frame data data frame data missing values,    NÁ missing values analyticVars: vector value argument AnalyticVars params: list values grouping, logical, numeric arguments formulaRf:  formula used analysis (variables specified argument AnalyticVars                        separated + signs) forest:  summary random forest call, estimated error rate,   confusion matrix importance:  data frame information importance variable    AnalyticVars confusion:  data frame estimate confusion matrix predictedData:   data frame artifact data used predictions;   missing data, imputation missing data predictedNA: data frame observations missing data imputed;   NA missing data predictedSources:  data frame prediction information, sample ID (requested),      values AnalyticVars predictedTotals:  vector predicted totals group (source) impError: estimated OOB (bag) error imputed predictor data;   NA imputed data location: value parameter folder","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_randomForest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ps_randomForest — ps_randomForest","text":"function implements random forest analysis using R function randomForest(). predictSources plotSourceProbs TRUE, function creates two box plots.   first plot shows, source,  set probabilities assignment source    observations assigned source (probabilities large).    second plot shows, source, set probabilities assignment source     observations assigned source (source,     one probability observation); probabilities relatively small,     zero.  See vignette details examples plots.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_randomForest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ps_randomForest — ps_randomForest","text":"","code":"data(ObsidianSources) analyticVars<-c(\"Rb\",\"Sr\",\"Y\",\"Zr\",\"Nb\") save_randomForest <- ps_randomForest(data=ObsidianSources, GroupVar=\"Code\",Groups=\"All\",   sourceID=\"ID\", AnalyticVars=analyticVars, NvarUsed=3, plotSourceProbs=FALSE)   # # predicted sources for artifacts data(ObsidianSources) data(ObsidianArtifacts) analyticVars<-c(\"Rb\",\"Sr\",\"Y\",\"Zr\",\"Nb\") save_randomForest <- ps_randomForest(data=ObsidianSources, GroupVar=\"Code\",Groups=\"All\", AnalyticVars=analyticVars, sourceID=\"ID\", NvarUsed=3, plotErrorRate=FALSE, plotImportance=FALSE, predictSources=TRUE, predictData=ObsidianArtifacts, unknownID=\"ID\",  plotSourceProbs=TRUE) #> Warning: some notches went outside hinges ('box'): maybe set notch=FALSE  #> Warning: some notches went outside hinges ('box'): maybe set notch=FALSE"},{"path":"https://benmarwick.github.io/predictSource/reference/ps_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"ps_tree — ps_tree","title":"ps_tree — ps_tree","text":"Fit recursive partitioning model (classification tree) data sources","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ps_tree — ps_tree","text":"","code":"ps_tree(   doc = \"ps_tree\",   data,   GroupVar,   Groups = \"All\",   AnalyticVars,   wts = NA,   Seed = 11111,   CpDigits = 3,   plotTree = TRUE,   plotCp = TRUE,   Model,   ModelTitle,   minSplit = 20,   cP = 0.01,   predictSources = TRUE,   predictUnknowns = FALSE,   unknownData,   ID = \" \",   unknownID = \" \",   folder = \" \" )"},{"path":"https://benmarwick.github.io/predictSource/reference/ps_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ps_tree — ps_tree","text":"doc string documentation added defintion usage, default ps_tree (function name) data data frame source data analyzed GroupVar name variable defining groups, grouping required Groups vector codes groups used, '' (default) use groups AnalyticVars vector names (character values) analytic variables wts Option weight observations, used, vector length nrow(data); NA (default), assume equal weights Seed positive integer, produce reproducible analysis CpDigits number significant digits display Cp table, default value 3 plotTree Logical.  TRUE (default), plot recursive partitioning tree plotCp Logical.  TRUE (default), plot Cp table values Model character string containing names variables (characters) considered separated + signs ModelTitle parameter Model single character value minSplit minimum size group splitting, default 20 (default rpart()) cP required improvement Cp group split, default .01 (default rpart()) predictSources Logical: TRUE, use tree predict sources source data; default TRUE predictUnknowns Logical: TRUE, use tree predict sources observations unknownData; default FALSE unknownData Data frame data used predict sources, must contain variables AnalyticVars ID \" \" (default), name variable identifying sample data unknownID \" \" (default), name variable identifying sample unknownData folder path folder data frames saved; default \" \"","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ps_tree — ps_tree","text":"function returns list following components: usage: string contents argument doc, date run, version R used dataUsed: contents argument data restricted groups used params_grouping: list values arguments GroupVar Groups analyticVars: vector value argument AnalyticVars params: list values grouping, logical, splitting parameters Seed: positive integer set random number generator model: character string value argument ModelTitle treeFit: list details tree construction_ classification:  data frame showing crossclassification sources predicted sources.  Rows     represent sources, columns represent predicted source CpTable:  data frame showing decrease Cp increasing numbers splits predictedSource:  predictSources = TRUE, data frame predicted source source   sample, plus known source, sample ID (given), analytic variable values predictedProbs:  predictSources = TRUE, data frame set prediction probabilities   source sample, plus known source sample ID (given) predictedSourceUnknowns:  predictUnknowns = TRUE, data frame predicted source unknown   sample, plus  sample ID (given) analytic variable values predictedProbsUnknowns:  predictUnknowns = TRUE, data frame set prediction probabilities   unknown sample, plus sample ID (given) errorRate:  predictSources = TRUE, proportion misassigned source samples errorCount: predictSources = TRUE, vector number misassigned sources   total number sources predictedTotalsUnknowns: predictUnknowns = TRUE, vector number objects predicted source location: value argument folder","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_tree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ps_tree — ps_tree","text":"function fits classification tree model us R function rpart().   variables AnalyticVars considered order appear    Model argument (left right).  See vignette details.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/ps_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ps_tree — ps_tree","text":"","code":"# Analyze the obsidian source data with variables in the model statement in order of # importance from a random forest analysis data(ObsidianSources) analyticVars<-c(\"Rb\",\"Sr\",\"Y\",\"Zr\",\"Nb\") save_tree <- ps_tree(data=ObsidianSources, GroupVar=\"Code\",Groups=\"All\",  AnalyticVars=analyticVars, Model = \"Rb\"+\"Sr\"+\"Y\"+\"Zr\"+\"Nb\",  ModelTitle = \"Sr + Nb + Rb + Y + Zr\", predictSources=TRUE, predictUnknowns=FALSE,  ID=\"ID\")    # Predict the sources of the obsidian artifacts data(ObsidianSources) data(ObsidianArtifacts) analyticVars<-c(\"Rb\",\"Sr\",\"Y\",\"Zr\",\"Nb\") save_tree <- ps_tree(data=ObsidianSources, GroupVar=\"Code\",Groups=\"All\",  AnalyticVars=analyticVars, Model = \"Rb\"+\"Sr\"+\"Y\"+\"Zr\"+\"Nb\",  ModelTitle = \"Sr + Nb + Rb + Y + Zr\", predictSources=FALSE, predictUnknowns=TRUE,  unknownData=ObsidianArtifacts, unknownID=\"ID\")"},{"path":"https://benmarwick.github.io/predictSource/reference/sources.data.check.html","id":null,"dir":"Reference","previous_headings":"","what":"Data for sources identified as potentially of interest in a plot of\nzirconium versus rubidium for Jemez source data. — sources.data.check","title":"Data for sources identified as potentially of interest in a plot of\nzirconium versus rubidium for Jemez source data. — sources.data.check","text":"Data sources identified potentially interest plot zirconium versus rubidium Jemez source data.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/sources.data.check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data for sources identified as potentially of interest in a plot of\nzirconium versus rubidium for Jemez source data. — sources.data.check","text":"","code":"sources.data.check"},{"path":"https://benmarwick.github.io/predictSource/reference/sources.data.check.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data for sources identified as potentially of interest in a plot of\nzirconium versus rubidium for Jemez source data. — sources.data.check","text":"data frame 5 rows 7 variables: Code character code source. ID laboratory ID artifact. Rb vector rubidium values. Sr vector strontium values. Y vector yttrium values. Zr vector zirconium values. Nb vector niobium values.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/sources.data.check.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data for sources identified as potentially of interest in a plot of\nzirconium versus rubidium for Jemez source data. — sources.data.check","text":"data frame obtained function ps_2dPlotGauss() using Identify=TRUE.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/test2dPlotGauss.html","id":null,"dir":"Reference","previous_headings":"","what":"A list used to verify that ps_2dPlotGauss() is valid — test2dPlotGauss","title":"A list used to verify that ps_2dPlotGauss() is valid — test2dPlotGauss","text":"list used verify ps_2dPlotGauss() valid","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/test2dPlotGauss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A list used to verify that ps_2dPlotGauss() is valid — test2dPlotGauss","text":"","code":"test2dPlotGauss"},{"path":"https://benmarwick.github.io/predictSource/reference/test2dPlotGauss.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A list used to verify that ps_2dPlotGauss() is valid — test2dPlotGauss","text":"list following elements usage: String contents argument doc, date run, version R used dataUsed: contents argument data restricted groups used dataNA: data frame observations containing least one missing value   analysis variable, NA missing values analyticVars: vector contents argument analyticVars variablePair: vector contents argument variablePair params: list values grouping, logical, numberic arguments pvalues: data frame p-values univariate bivariate tests normality dataCheck: Identify=TRUE, data frame information user-identified points interest location: value parameter folder","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/testCV_corr.html","id":null,"dir":"Reference","previous_headings":"","what":"A list used to verify that ps_CV_corr() is valid — testCV_corr","title":"A list used to verify that ps_CV_corr() is valid — testCV_corr","text":"list used verify ps_CV_corr() valid","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/testCV_corr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A list used to verify that ps_CV_corr() is valid — testCV_corr","text":"","code":"testCV_corr"},{"path":"https://benmarwick.github.io/predictSource/reference/testCV_corr.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A list used to verify that ps_CV_corr() is valid — testCV_corr","text":"list following elements usage: vector contents argument doc, date run, version R used dataUsed: contents argument data restricted groups used dataNA: data frame observations containing least one missing value   analysis variable, NA missing values params: list containing values grouping,logical, numeric parameters analyticVars: vector value argument AnalyticVars CV: data frame coefficients variation analytic variable group corr: data frame correlations pairs variables group location: value parameter folder","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/testCheckData.html","id":null,"dir":"Reference","previous_headings":"","what":"A list used to verify that ps_checkData() is valid — testCheckData","title":"A list used to verify that ps_checkData() is valid — testCheckData","text":"list used verify ps_checkData() valid","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/testCheckData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A list used to verify that ps_checkData() is valid — testCheckData","text":"","code":"testCheckData"},{"path":"https://benmarwick.github.io/predictSource/reference/testCheckData.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A list used to verify that ps_checkData() is valid — testCheckData","text":"list following elements usage: string contents argument doc, date run, R version used dataUsed: data frame specified argument data GroupVar params: character vector values CheckDupVars, GroupVar, Groups analyticVars: vector names specified argument AnalyticVars Duplicates: data frame containing observations duplicate values NegativeValues: data frame containing observations least one negative  value variable AnalyticVars Nvalues: data frame contain number observations value analytic variable statistics: data frame containing statistics statistics (group, Group specified) location: value parameter folder","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/testTree.html","id":null,"dir":"Reference","previous_headings":"","what":"A list used to verify that ps_tree() is valid — testTree","title":"A list used to verify that ps_tree() is valid — testTree","text":"list used verify ps_tree() valid","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/testTree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A list used to verify that ps_tree() is valid — testTree","text":"","code":"testTree"},{"path":"https://benmarwick.github.io/predictSource/reference/testTree.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A list used to verify that ps_tree() is valid — testTree","text":"list following elements usage: string contents argument doc, date run, version R used dataUsed: contents argument data restricted groups used params_grouping: list values arguments GroupVar Groups analyticVars: vector value argument AnalyticVars params: list values grouping, logical, splitting parameters model: character string value argument ModelTitle Tree: list details tree construction_ classification: data frame showing crossclassification sources predicted sources CpTable: data frame showing decrease Cp increasing numbers splits predictedSources: predictSources = T, data frame predicted sources predictedTotals: predictedSources = T, vector number objects predicted source location: value parameter folder","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/test_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"A list used to verify that ps_pca() is valid — test_pca","title":"A list used to verify that ps_pca() is valid — test_pca","text":"list used verify ps_pca() valid","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/test_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A list used to verify that ps_pca() is valid — test_pca","text":"","code":"test_pca"},{"path":"https://benmarwick.github.io/predictSource/reference/test_pca.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A list used to verify that ps_pca() is valid — test_pca","text":"list following elements usage: string contents argument doc, date run, version R used dataUsed: contents argument data restricted groups used dataNA: data frame observations containing least one missing value   analysis variable, NA missing values params: list values arguments grouping, logical parameters,   Ellipses, Colors analyticVars: vector value argument AnalyticVars ellipse_pct: value argument Ellipses variances: data frame including percent variation explained   principal component cumulative percent explained weights: data frame principal component weights observation Predicted: data frame predicted values principal component,    plus value Groups integer GroupIndex (values 1:number Groups) DataPlusPredicted: data frame data used compute principal components,    plus GroupIndex (defined ) predicted values principal component dataCheck: Identify=TRUE, data frame observations dataUsed    identified interest location: value parameter folder","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/test_pcaEval.html","id":null,"dir":"Reference","previous_headings":"","what":"A list used to verify that ps_pcaEvaluation() is valid — test_pcaEval","title":"A list used to verify that ps_pcaEvaluation() is valid — test_pcaEval","text":"list used verify ps_pcaEvaluation() valid","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/test_pcaEval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A list used to verify that ps_pcaEvaluation() is valid — test_pcaEval","text":"","code":"test_pcaEval"},{"path":"https://benmarwick.github.io/predictSource/reference/test_pcaEval.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A list used to verify that ps_pcaEvaluation() is valid — test_pcaEval","text":"list following elements usage: vector contents argument doc, date run,   version R used sourceData: contents argument SourceData restricted knownSources sourcesNA: data frame source observations missing data analytic   variables; NA missing data unknownData: contents argument unknownData restricted predictedSources unknownsNA: data frame unknown observations missing data analytic   variables; NA missing data impError Normalized root mean square error estimate imputed data;   NA missing data params: list values grouping source arguments   values logical arguments analyticVars: vector value argument AnalyticVars tableInOut: data frame counts numbers unknowns inside   outside predicted source location ptsOutside: data frame data unknown points located outside    predicted source dataCheck: Identify=TRUE, data frame observations dataUsed identified    interest; value c(NA,NA) points identified location: value parameter folder","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/test_pcaGauss.html","id":null,"dir":"Reference","previous_headings":"","what":"A list used to verify that ps_pcaGauss() is valid — test_pcaGauss","title":"A list used to verify that ps_pcaGauss() is valid — test_pcaGauss","text":"list used verify ps_pcaGauss() valid","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/test_pcaGauss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A list used to verify that ps_pcaGauss() is valid — test_pcaGauss","text":"","code":"test_pcaGauss"},{"path":"https://benmarwick.github.io/predictSource/reference/test_pcaGauss.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A list used to verify that ps_pcaGauss() is valid — test_pcaGauss","text":"list following elements usage: vector contents argument doc, date run, version R used dataUsed: contents argument data restricted groups used dataNA: data frame observations containing least one missing value   analysis variable, NA missing values params: list values arguments grouping logical arguments analyticVars: vector value argument AnalyticVars pvalues: data frame p-values Gaussian assumptions    group specified data_check: data frame data identified generating points interest;  value NA points identified location: value parameter folder","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/test_randomForest.html","id":null,"dir":"Reference","previous_headings":"","what":"A list used to verify that ps_randomForest() is valid — test_randomForest","title":"A list used to verify that ps_randomForest() is valid — test_randomForest","text":"list used verify ps_randomForest() valid","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/test_randomForest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A list used to verify that ps_randomForest() is valid — test_randomForest","text":"","code":"test_randomForest"},{"path":"https://benmarwick.github.io/predictSource/reference/test_randomForest.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A list used to verify that ps_randomForest() is valid — test_randomForest","text":"list following elements usage: string contents argument doc, date run, version R used dataUsed: contents argument data restricted groups used sourcesNA: data frame data data frame data missing values,    NÁ missing values analyticVars: vector value argument AnalyticVars params: list values grouping, logical, numeric arguments formulaRf: formula used analysis (variables specified argument AnalyticVars    separated + signs) forest: summary random forest call, estimated error rate,   confusion matrix importance: data frame information importance variable    AnalyticVars confusion: data frame estimate confusion matrix predictedData: data frame artifact data used predictions;   missing data, imputation missing data predictedNA: data frame observations missing data imputed;   NA missing data predictedSources: data frame prediction information, sample ID (requested),    values AnalyticVars predictedTotals: vector predicted totals group (source) impError: estimated OOB (bag) error imputed predictor data;   NA imputed data location: value parameter folder","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/tree.data.check.html","id":null,"dir":"Reference","previous_headings":"","what":"Data for artifacts with a predicted Jemez source likely misclassified\nby a classifiication tree model. — tree.data.check","title":"Data for artifacts with a predicted Jemez source likely misclassified\nby a classifiication tree model. — tree.data.check","text":"data set containing predicted source code, lab ID, element values, first two principal components artifacts.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/tree.data.check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data for artifacts with a predicted Jemez source likely misclassified\nby a classifiication tree model. — tree.data.check","text":"","code":"tree.data.check"},{"path":"https://benmarwick.github.io/predictSource/reference/tree.data.check.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data for artifacts with a predicted Jemez source likely misclassified\nby a classifiication tree model. — tree.data.check","text":"data frame 11 rows 9 variables: group character code predicted source. ID laboratory ID artifact. Rb vector rubidium values. Sr vector strontium values. Y vector ytterbium values. Zr vector zirconium values. Nb vector niobium values. pc1 vector values first principal component   principal component plot Jemez sources artifacts. pc2 vector values second principal component   principal component plot Jemez sources artifacts.","code":""},{"path":"https://benmarwick.github.io/predictSource/reference/tree.data.check.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data for artifacts with a predicted Jemez source likely misclassified\nby a classifiication tree model. — tree.data.check","text":"data frame obtained function ps_pcaEvaluation() using Identify=TRUE.","code":""}]
